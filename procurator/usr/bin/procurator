#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
# Copyright 2012 Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 

## Load translations

LanguageLess="$(echo "$LANG" | awk -F '.' '{print $1}')"

if [ -f /etc/procurator/Translations/$LanguageLess ]; then
 . /etc/procurator/Translations/$LanguageLess
else
 . /etc/procurator/Translations/en_US
fi

Icon='--window-icon=kvm'

Title='--title=Procurator'

## Ensure needed directories exist
mkdir -p $HOME/.procurator/disks
mkdir -p $HOME/.procurator/notes
mkdir -p $HOME/.procurator/config


MainMenu () {


## Reset variables
MainMenuArray=("")
NewDiskName=""
Operation=""
BootISO=""
Disk=""

MainMenuArray=( "Boot Existing" "$MMBDISK" "Boot ISO" "$MMBISO" "Clone Drive" "$MMCLONE" "Create New" "$MMCREATENEW" "Delete Drive" "$MMDELETEDRIVE" "Import .vmdk" "$MMIMPORT" "Modify Config" "$MMMODIFYCONFIG" "Rename Drive" "$MMRENAME" )

Selection=$(yad --list --always-print-result --column="Action" --column="Description" --print-column="1" $Icon $Title --width="600" --height="350" --button=$"gtk-help:5" --button=$"gtk-quit:3" --button=$"gtk-ok:1" "${MainMenuArray[@]}")

ret="$?"

Selection="$(echo "$Selection" | awk -F '|' '{print $1}')"

if [ "$ret" = "3" ]; then
 exit 0
elif [ "$ret" = "5" ]; then
 DisplayHelp
 MainMenu
 exit 0
elif [ "$Selection" = "Boot Existing" ]; then
 Operation="Boot"
 SelectDrive
 exit 0
elif [ "$Selection" = "Clone Drive" ]; then
 Operation="Clone"
 SelectDrive
 MainMenu
 exit 0
elif [ "$Selection" = "Import .vmdk" ]; then
 SelectVMDK
 MainMenu
 exit 0
elif [ "$Selection" = "Rename Drive" ]; then
 Operation="Rename"
 SelectDrive
 MainMenu
 exit 0
elif [ "$Selection" = "Boot ISO" ]; then
 Operation="ISO"
 SelectISO
 MainMenu
 exit 0
elif [ "$Selection" = "Create New" ]; then
 Operation="Create"
 CreateNewDisk
 MainMenu
 exit 0
elif [ "$Selection" = "Delete Drive" ]; then
 Operation="Delete"
 SelectDrive
 MainMenu
 exit 0
elif [ "$Selection" = "Modify Config" ]; then
 Operation="Modify"
 SelectDrive
 MainMenu
 exit 0
fi


}


ParseOptions () {


if [ ! -f "$HOME/.procurator/config/$Disk" ]; then
 WriteConfig
fi


RamSize=$(grep -B -0 'RamSize=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')

VideoOutput=$(grep -B -0 'VideoOutput=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')


VideoDriver=$(grep -B -0 'VideoDriver=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')

DiskDriver=$(grep -B -0 'DiskDriver=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')

TabletMode=$(grep -B -0 'TabletMode=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')

FullScreen=$(grep -B -0 'FullScreen=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')

BlueTooth=$(grep -B -0 'BlueTooth=' "$HOME/.procurator/config/$Disk" | awk -F '=' '{print $2}')


}


ChangeOptions () {


## Use the parse options function to get initial values
ParseOptions

## Construct proper arrays for yad form
## Video output
OutputArray=( "$VideoOutput"!"sdl"!"spice" )

## Memory size
SystemRam=$(free -m | grep 'Mem' | awk '{print $2}')
RamForArray=$(($SystemRam / 3))
RamArray=( "$RamSize"!"$RamForArray"!"128"!"256"!"512"!"1024"!"2048"!"3072"!"4096" )

## VideoDriver
DriverArray=( "$VideoDriver"!"cirrus"!"std"!"vmware"!"qxl" )

## Disk Driver
DiskDriverArray=( "$DiskDriver"!"ide"!"virtio" )

SelectedOptions=$(yad --always-print-result $Icon $Title --form --text="               $OPTIONSDIALOGTEXT $Disk                \n" --field="$MEMORYFIELD:CB" --field="$DISKDRIVERFIELD:CB" --field="$VIDEOFIELD:CB" --field="$VDRIVERFIELD:CB" --field="$FULLSCREEN:CHK" --field="$TABLETMODE:CHK" --field="$BLUETOOTH:CHK" "${RamArray[@]}" "${DiskDriverArray[@]}" "${OutputArray[@]}" "${DriverArray[@]}" "$FullScreen" "$TabletMode" "$BlueTooth") 

RamSize="$(echo "$SelectedOptions" | awk -F '|' '{print $1}')"
DiskDriver="$(echo "$SelectedOptions" | awk -F '|' '{print $2}')"
VideoOutput="$(echo "$SelectedOptions" | awk -F '|' '{print $3}')"
VideoDriver="$(echo "$SelectedOptions" | awk -F '|' '{print $4}')"
FullScreen="$(echo "$SelectedOptions" | awk -F '|' '{print $5}')"
TabletMode="$(echo "$SelectedOptions" | awk -F '|' '{print $6}')"
BlueTooth="$(echo "$SelectedOptions" | awk -F '|' '{print $7}')"

WriteConfig


}


WriteConfig () {


if [ -f "$HOME/.procurator/config/$Disk" ]; then
 rm "$HOME/.procurator/config/$Disk"
fi

if [ "$RamSize" = "" ]; then
 SystemRam=$(free -m | grep 'Mem' | awk '{print $2}')
 RamSize=$(($SystemRam / 3))
fi

if [ "$DiskDriver" = "" ]; then
 DiskDriver="ide"
fi

if [ "$VideoOutput" = "" ]; then
 VideoOutput="sdl"
fi

if [ "$VideoDriver" = "" ]; then
 VideoDriver="cirrus"
fi

if [ "$FullScreen" = "" ]; then
 FullScreen="FALSE"
fi

if [ "$TabletMode" = "" ]; then
 TabletMode="FALSE"
fi

if [ "$BlueTooth" = "" ]; then
 BlueTooth="FALSE"
fi

cat > "$HOME/.procurator/config/$Disk" <<FOO
RamSize=$RamSize
DiskDriver=$DiskDriver
VideoOutput=$VideoOutput
VideoDriver=$VideoDriver
FullScreen=$FullScreen
TabletMode=$TabletMode
BlueTooth=$BlueTooth

FOO


}


NameDisk () {


NewDiskName=$(yad --entry $Icon $Title --width=250 --wrap --text="$ENTERNAME" --button=$"gtk-ok:2")

ret="$?"

NewDiskName=$(echo "$NewDiskName" | sed -e 's| ||g')

if [ "$ret" = "252" ]; then
 MainMenu
 exit 0
elif [ "$NewDiskName" = "" ]; then
 NewDiskName=$(date +%Y%m%d-%H%M)
fi

if [ -f "$HOME/.procurator/disk/$NewDiskName" ]; then
 yad $Title $Icon --text="$FILEEXISTS" --button=$"gtk-no:0" --button=$"gtk-yes:1"
 if [ "$?" != "0" ]; then
  NameDisk
  exit 0
 fi
fi


NewDiskNotes=$(yad --entry --width=250 --wrap $Icon $Title --text="$NOTES" --button=$"gtk-ok:2")

if [ -f "$HOME/.procurator/notes/$NewDiskName" ]; then
 rm -rf "$HOME/.procurator/notes/$NewDiskName"
fi

if [ "$NewDiskNotes" != "" ]; then
 echo "$NewDiskNotes">>"$HOME/.procurator/notes/$NewDiskName"
else
 echo "Disk created on $(date +%Y%m%d-%H%M)">>"$HOME/.procurator/notes/$NewDiskName"
fi



if [ "$Operation" = "Rename" ]; then
 mv -f "$HOME/.procurator/disks/$Disk" "$HOME/.procurator/disks/$NewDiskName"
 mv -f "$HOME/.procurator/config/$Disk" "$HOME/.procurator/config/$NewDiskName"
 rm -rf "$HOME/.procurator/notes/$Disk"
 MainMenu
 exit 0
fi

if [ "$Operation" = "Clone" ]; then
 CloneDrive
 MainMenu
 exit 0
fi

qemu-img create -f raw -o size="$NewDiskSize"M $HOME/.procurator/disks/"$NewDiskName"
Disk="$NewDiskName"
ChangeOptions

}


CloneDrive () {


tail -f /usr/bin/procurator | yad --progress --pulsate $Title $Icon --auto-close --text="            Cloning $Disk to $NewDiskName            \n" &

cp -f "$HOME/.procurator/disks/$Disk" "$HOME/.procurator/disks/$NewDiskName"
cp -f "$HOME/.procurator/config/$Disk" "$HOME/.procurator/config/$NewDiskName"

TailPID=$(pgrep -f "tail -f /usr/bin/procurator")

sleep 2

kill $TailPID


}



DeleteDisk () {


## This should never actually run but just as a fail safe
if [ "$Disk" = "" ]; then
 MainMenu
 exit 0
fi


## Get Confirmation before removing the drive
yad $Title $Icon --image="dialog-warning" --width="275" --wrap --text="\n$WARNING1 $Disk $WARNING2\n" --button="gtk-no:3" --button="gtk-yes:5"

ret="$?"

if [ "$ret" = "3" ]; then
 MainMenu
 exit 0
elif [ "$ret" = "252" ]; then
 MainMenu
 exit 0
fi

rm -rf "$HOME/.procurator/disks/$Disk"
rm -rf "$HOME/.procurator/notes/$Disk"
rm -rf "$HOME/.procurator/config/$Disk"


}


CreateNewDisk () {


NewDiskSize=""

NewDiskSize=$(yad --list --title=Procurator --window-icon=kvm --print-column=1 --height=350 --column="Size In Megabytes" --column="Size In Gigabytes" --text="$DISKSIZE" --button=$"gtk-cancel:3" --button=$"gtk-ok:2" Custom '    Custom' 1024 '        1' 2048 '        2' 3072 '        3' 4096 '        4' 5120 '        5' 6144 '        6' 7168 '        7' 8192 '        8' 9216 '        9' 10240 '        10' 11264  '        11' 12288 '        12' 13312 '        13' 14336 '        14' 15360 '        15' 16384 '        16' 17408 '        17' 18432 '        18' 19456 '        19' 20480 '        20' 21504 '        21' 22528 '        22' 23552 '        23' 24576 '        24' 25600 '        25' 26624 '        26' 27648 '        27' 28672 '        28' 29696 '        29' 30720 '        30' 31744 '        31' 32768 '        32' 33792 '        33' 34816 '        34' 35840 '        35' 36864 '        36' 37888 '        37' 38912 '        38' 39936 '        39' 40960 '        40' 41984 '        41' 43008 '        42' 44032 '        43' 45056 '        44' 46080 '        45' 47104 '        46' 48128 '        47' 49152 '        48' 50176 '        49' 51200 '        50')

ret="$?"

NewDiskSize=$(echo "$NewDiskSize" | awk -F '|' '{print $1}')

if [ "$ret" = "252" ]; then
 MainMenu
 exit 0 
elif [ "$ret" = "3" ]; then
 MainMenu
 exit 0
elif [ "$NewDiskSize" = "Custom" ]; then
 NewDiskSize=$(yad --entry --width=250 $Icon --wrap $Title --text="$ENTERSIZE" --button=$"gtk-cancel:3" --button=$"gtk-ok:2")

 ret="$?"

 if [ "$ret" = "252" ]; then
  MainMenu
  exit 0
 elif [ "$ret" = "3" ]; then
  MainMenu
  exit 0
 elif [ "$NewDiskSize" = "" ]; then
  MainMenu
  exit 0
 fi
 NewDiskSize=$(($NewDiskSize * 1024))
fi


NameDisk


}


SelectISO () {


BootISO="$(yad $Title $Icon --width="725" --height="525" --file --text="                                               $SELECTISOTEXT                    \n" --file-filter="*.iso" --filename="$HOME/*" --button=$"gtk-cancel:3" --button=$"gtk-ok:2")"

ret="$?"

if [ "$ret" = "252" ]; then
 MainMenu
 exit 0
elif [ "$ret" = "3" ]; then
 MainMenu
 exit 0
elif [ "$BootISO" = "" ]; then
 yad $Icon $Title --wrap --width="250" --text="$NOBOOTISO \n" --button=$"gtk-ok:1"
 MainMenu
 exit 0
fi

SelectDrive


}


SelectVMDK () {


ToImport="$(yad $Title $Icon --width="725" --height="525" --file --text="                    $SELECTVMDK                    \n" --file-filter="*.vmdk" --filename="$HOME/*" --button=$"gtk-cancel:3" --button=$"gtk-ok:2")"

ret="$?"

if [ "$ret" = "252" ]; then
 MainMenu
 exit 0
elif [ "$ret" = "3" ]; then
 MainMenu
 exit 0
elif [ "$ToImport" = "" ]; then
 yad $Icon $Title --wrap --width="250" --text="$NOIMPORTSELECTED \n" --button=$"gtk-ok:1"
 MainMenu
 exit 0
fi

NewDiskName=$(echo "$ToImport" | awk -F '/' '{print $NF}')

ImportNotes


}


ImportNotes () {


NewDiskNotes=$(yad --entry --width=250 --wrap $Icon $Title --text="$NOTES" --button=$"gtk-ok:2")

if [ -f "$HOME/.procurator/notes/$NewDiskName" ]; then
 rm -rf "$HOME/.procurator/notes/$NewDiskName"
fi

if [ "$NewDiskNotes" != "" ]; then
 echo "$NewDiskNotes">>"$HOME/.procurator/notes/$NewDiskName"
else
 echo "Drive imported on $(date +%Y%m%d-%H%M)">>"$HOME/.procurator/notes/$NewDiskName"
fi


## Change options first so we can use existing functions and return to main menu when finished
ChangeOptions
ImportDrive


}


ImportDrive () {


tail -f /usr/bin/procurator | yad $Icon $Title --progress --pulsate --auto-close --text="          Importing $ToImport          /n" --no-buttons &

cp -f "$ToImport" $HOME/.procurator/disks

TailPID=$(pgrep -f "tail -f /usr/bin/procurator")

kill $TailPID

MainMenu
exit 0


}


DisplayHelp () {


yad --wrap --width=250 --title="Procurator Help" --text="$HELPTEXT" --button=$"gtk-ok:1"


}


SelectDrive () {


Menu=""

## Kind of a dirty hax to get the text I want on the selection dialog
if [ "$Operation" = "ISO" ]; then
 OperationText="$MAKEAVAILABLE .iso $IFANY"
else
 BunchOfSpaces='                  '
 OperationText="${Operation,,}"
fi 

for i in $(ls $HOME/.procurator/disks); do
 TempDisk="$i"
 DiskSize=$(du -c --apparent-size "$HOME/.procurator/disks/$i" | grep "total" | awk '{print $1}')
 DiskSize=$(($DiskSize / 1024))
 DiskSize="$DiskSize"M
if [ -f $HOME/.procurator/notes/$i ]; then
 Note=$(cat "$HOME/.procurator/notes/$i")
else
 Note="None"
fi
 if [ "$Menu" = "" ]; then
  Menu=( "$TempDisk" "$DiskSize" "$Note" )
 else
  Menu=( "${Menu[@]}" "$TempDisk" "$DiskSize" "$Note" )
 fi
done

Selection=$(yad --text="    $BunchOfSpaces $SELECTDRIVETEXT $OperationText          \n" --width="625" --height=350 --always-print-result --center --list --column="$VDISKS" --column="$SIZE" --column="$NOTES1" $Title $Icon --button=$"gtk-help:3" --button=$"gtk-cancel:5" --button=$"$CREATENEW:7" --button=$"gtk-ok:2" "${Menu[@]}" )

ret="$?"

Disk=$(echo "$Selection" | awk -F '|' '{print $1}')

if [ "$ret" = "252" ]; then
 MainMenu
 exit 0 
elif [ "$ret" = "3" ]; then
 DisplayHelp
 SelectDrive
 exit 0
elif [ "$ret" = "7" ]; then
 CreateNewDisk
 SelectDrive
 exit 0
elif [ "$ret" = "5" ]; then
 MainMenu
 exit 0
fi

if [ "$Operation" = "Boot" ]; then
 if [ "$Disk" = "" ]; then
  SelectDrive
  exit 0
 fi
 BootDrive
 exit 0
elif [ "$Operation" = "Modify" ]; then
 if [ "$Disk" = "" ]; then
  SelectDrive
  exit 0
 fi
 ChangeOptions
elif [ "$Operation" = "ISO" ]; then
 BootDrive
elif [ "$Operation" = "Delete" ]; then
 if [ "$Disk" = "" ]; then
  SelectDrive
  exit 0
 fi
 DeleteDisk
elif [ "$Operation" = "Rename" ]; then
 if [ "$Disk" = "" ]; then
  SelectDrive
  exit 0
 fi
 NameDisk
elif [ "$Operation" = "Clone" ]; then
 if [ "$Disk" = "" ]; then
  SelectDrive
  exit 0
 fi
 NameDisk
fi


}


BootDrive () {


## Get options if needed
if [ "$Disk" != "" ]; then
 ParseOptions
fi

## If we are just booting an ISO set the needed options manually
if [ "$RamSize" = "" ]; then
 SystemRam=$(free -m | grep 'Mem' | awk '{print $2}')
 RamSize=$(($SystemRam / 3))
fi

## Make sure RamSize is less than 2047
if [ "$RamSize" > "2046" ]; then
 RamSize="2046"
fi

if [ "$DiskDriver" = "" ]; then
 DiskDriver="ide"
fi

if [ "$VideoOutput" = "" ]; then
 VideoOutput="sdl"
fi

if [ "$VideoDriver" = "" ]; then
 VideoDriver="cirrus"
fi

if [ "$FullScreen" = "" ]; then
 FullScreen="FALSE"
fi

if [ "$TabletMode" = "" ]; then
 TabletMode="FALSE"
fi

if [ "$BlueTooth" = "" ]; then
 BlueTooth="FALSE"
fi

## Determine the number of processor cores
Cores=$(cat /proc/cpuinfo | grep 'processor' | tail --lines=1 | awk -F ': ' '{print $2}')
Cores=$(($Cores + 1))

## Set the window title for QEMU depending on if we are booting an ISO or a DISK
if [ "$BootISO" != "" ]; then
 ISOName="$(echo "$BootISO" | awk -F '/' '{print $NF}')"
 SetName=( "-name" "$ISOName" )
else
 SetName=( "-name" "$Disk" )
fi

## Use the first CDRom if no ISO is specified
if [ "$BootISO" = "" ]; then
 BootISO=$(ls /dev | grep "cdrom" | awk '{print $1}')
 if [ "$BootISO" != "" ]; then
  BootISO=$(echo "/dev/$BootISO")
 fi
fi

## Make a proper CDROM array depending on if BootISO is still blank
if [ "$BootISO" != "" ]; then
 CDRomArray=( "-cdrom" "$BootISO" )
fi

## Force QXL if using spice and set spice options.
if [ "$VideoOutput" = "spice" ]; then
 VideoDriver="qxl"
 SpiceArray=( "port=7063,addr=127.0.0.1,disable-ticketing" )
 SpiceViewer=( "spicy" "-h" "127.0.0.1" "-p" "7063" )
fi

if [ "$Disk" != "" ]; then
 HardDisk=( "-drive" "file="$HOME/.procurator/disks/$Disk",cache=none,media=disk,if=$DiskDriver" )
fi

if [ "$TabletMode" = "TRUE" ]; then
 EnableTablet=( "-tablet" )
fi

if [ "$FullScreen" = "TRUE" ]; then
 EnableFullScreen=( "-full-screen" )
fi

if [ "$BlueTooth" = "TRUE" ]; then
 EnableBlueTooth=( "-bt hci" )
fi

## Just a bit of debugging information
echo "These are the options being sent to KVM "${EnableTablet[@]}" "${EnableFullScreen[@]}" "${EnableBlueTooth[@]}" "${SetName[@]}" -cpu host -boot order=dc -m $RamSize -smp $Cores -soundhw ac97 -$VideoOutput "${SpiceArray[@]}" -vga $VideoDriver "${CDRomArray[@]}" "${HardDisk[@]}""

## Not the cleanest of code.
if [ "$VideoOutput" = "spice" ]; then
while [ "$Wait" != "Go" ]; do
 sleep 2
 Wait=Go
 "${SpiceViewer[@]}"
done &
fi


kvm "${EnableTablet[@]}" "${EnableFullScreen[@]}" "${EnableBlueTooth[@]}" "${SetName[@]}" -boot order=dc -m $RamSize -smp $Cores -cpu host -soundhw ac97 -$VideoOutput "${SpiceArray[@]}" -vga $VideoDriver "${CDRomArray[@]}" "${HardDisk[@]}"


ret="$?"

if [ "$ret" != "0" ]; then
 DisplayHelp
fi

MainMenu


}


StartHere () {


if [ "$Input" = "" ]; then
 MainMenu
fi

TestISO="$(echo "$Input" | grep ".iso")"

TestVMDK="$(echo "$Input" | grep ".vmdk")"

if [ "$TestISO" != "" ]; then
 BootISO="$TestISO"
 Operation="ISO"
 SelectDrive
fi

if [ "$TestVMDK" != "" ]; then
 ToImport="$TestVMDK"
 NewDiskName=$(echo "$ToImport" | awk -F '/' '{print $NF}')
 ImportNotes
fi


}


Input="$1"

StartHere

exit 0