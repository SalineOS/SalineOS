#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
# Copyright 2012 Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 
# Some code borrowed from the Remastersys Installer by Tony Brijeski 
# All borrowed code has been heavily modified for use in this script.
#
################### Remastersys-installer original copyright notice ##########################
#  remastersys-installer is an alternative installer for remastered livecd/dvd's
#
#
#  Created by Tony "Fragadelic" Brijeski
#
#  Copyright 2008,2009,2010 Under the GNU GPL2 License
#
#  Originally Created September 12th,2008
#
################### End Original copyright notice ###########################################


## Set options for yet another dialog, this makes creating dialogs much easier.

Info='yad --center --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png'

Question='yad  --wrap --center --image=gtk-dialog-question --button=gtk-no:1 --button=gtk-yes:0 --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png'

SingleMenu='yad  --center --list --column="Please choose one." --title=SalineOS-Installer --window-icon=/usr/share/icons/pixmaps/salineos-installer.png'

Menu='yad --print-column=1 --center --list --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png'

Progress='yad --center --progress --auto-close --title=SalineOS-Installer --no-buttons --window-icon=/usr/share/pixmaps/salineos-installer.png'

TextEntry='yad --center --entry --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png'


## Check for root and cry like a little girl if we don't have it.

TestRoot="$(whoami)"

if [ "$TestRoot" != "root" ]; then
 $Info --button=$"gtk-quit:1" --text="SalineOS Installer must be run as root."
 exit 1
fi


## This installer only takes one option, ext3 this variable is testing for it.
Input="$@"

RunInstallation () { 

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="           Preparing disk and partitions           " &

## Preserve kernel options in the new grub system
NewGrubLine="$(cat /proc/cmdline | awk -F 'config ' '{print $2}' | awk -F ' BOOT' '{print $1}')"

OldGrubLine=$(grep -B 0  "GRUB_CMDLINE_LINUX=" /etc/default/grub)

sed -i -e "s/$OldGrubLine/GRUB_CMDLINE_LINUX=\"$NewGrubLine\"/g" /etc/default/grub

## This installer only takes one option this makes use of it.
if [ "$Input" = "ext3" ]; then
 FilesystemType="ext3"
else
 FilesystemType="ext4"
fi


## Create partitions if auto partitioning is used.
if [ "$AutoPart" = "Auto" ]; then 
 parted --script --align optimal /dev/$PartDrive mklabel msdos
 parted --script --align optimal /dev/$PartDrive mkpart primary 1 -- -1
 parted --script --align optimal /dev/$PartDrive set 1 boot on
 TargetHomePart="root"
 TargetPart="$PartDrive"1
fi

## Unmount the target partition
if [ "$(mount | grep $TargetPart)" != "" ]; then
 umount /dev/$TargetPart
 umount -l /dev/$TargetPart
 sleep 3
fi

## Perserve labels set by users in GParted
if [ "$(ls /dev/disk/by-label)" != "" ]; then
 LabelRoot=$(find /dev/disk/by-label/* -printf %f" "%l\\n | grep "$TargetPart" | awk '{print $1}' | sed -e 's|\\x20| |g')
fi
sleep 2
mke2fs -t $FilesystemType /dev/$TargetPart

sleep 2

if [ "$LabelRoot" != "" ]; then
 tune2fs -L "$LabelRoot" /dev/$TargetPart
fi

mkdir -p /Target

sleep 2

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="                   Mounting $TargetPart                   " &

mount /dev/$TargetPart /Target -o rw

sleep 3

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="Configure the filesystem to be checked\nevery 35 mounts" &

tune2fs -c 35 -i 0 /dev/$TargetPart

sleep 3

rm -rf /Target/lost+found

killall -KILL tail

if [ "$TargetHomePart" = "" ]; then
 TargetHomePart="root"
fi

if [ "$TargetHomePart" != "root" ]; then
 if [ "$FormatHome" = "True" ]; then
  tail -f /usr/bin/salineos-backup | $Progress --pulsate --text="           Formatting $TargetHomePart for /home           " &
  umount /dev/$TargetHomePart
  umount -l /dev/$TargetHomePart
  sleep 2
 ## Perserve labels set by users in GParted
 if [ "$(ls /dev/disk/by-label)" != "" ]; then
  LabelHome=$(find /dev/disk/by-label/* -printf %f" "%l\\n | grep "$TargetHomePart" | awk '{print $1}' | sed -e 's|\\x20| |g')
 fi
  sleep 2
  mke2fs -t $FilesystemType /dev/$TargetHomePart
  sleep 3
  if [ "$LabelHome" != "" ]; then
   tune2fs -L "$LabelHome" /dev/$TargetHomePart
  fi
  killall -KILL tail
 fi

 tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="              Mounting $TargetHomePart              " &

 mkdir -p /Target/home

 mount /dev/$TargetHomePart /Target/home -o rw

 tune2fs -c 35 -i 0 /dev/$TargetHomePart

 rm -rf /Target/home/lost+found

 TargetHomeUUID=$(blkid /dev/$TargetHomePart | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')

 ## Get fs type for the home partition in case the user chose not to format it
 HomeFilesystemType=$(mount | grep "/dev/$TargetHomePart" | awk '{print $5}' | awk -F ' ' '{print $1}')

 killall -KILL tail
fi

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="               Generating UUID values for fstab               " &

TargetPartUUID=$(blkid /dev/$TargetPart | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')
TargetCDRom="/dev/cdrom"

sleep 3

killall -KILL tail

## Install language packages and restricted codecs ################################################################
if [ "$Internet" != "Continue" ]; then

 if [ -f /tmp/localizesys-output ]; then
  LanguagePackages="$(cat /tmp/localizesys-output)"
 fi
 
 if [ "$InstallCodec" != "FALSE" ]; then
 if [ "$(grep '# Debian Multimedia' /etc/apt/sources.list)" = "" ]; then
  echo ' ' >>/etc/apt/sources.list
  echo ' ' >>/etc/apt/sources.list
  echo "# Debian Multimedia">>/etc/apt/sources.list
  echo "deb http://www.deb-multimedia.org wheezy main non-free">>/etc/apt/sources.list
 fi
 fi

if [ "$InstallCodec" != "FALSE" ]; then
   CodecPackages="flashplugin-nonfree deb-multimedia-keyring gstreamer0.10-ffmpeg gstreamer0.10-crystalhd gstreamer0.10-plugins-bad gstreamer0.10-plugins-ugly gstreamer0.10-fluendo-mp3 unrar libdvdread4 libdvdcss2" 
fi 

tail -f /usr/bin/salineos-installer | yad --progress --auto-close --no-buttons --pulsate --title="SalineOS Installer" --window-icon="/usr/share/pixmaps/salineos-installer.png" --text="               Updating package cache               \n" &

aptitude update

sleep 1

killall -KILL tail

## Codecs
for i in $CodecPackages; do

pkcon -p -y install $i>>/tmp/packagekit-url-tmp &

sleep 2

(while [ "$(pidof pkcon)" != "" ]; do
CurrentOutput="$(tail --lines=1 /tmp/packagekit-url-tmp)"
echo "# $CurrentOutput" | sed -u "s|# Percentage:	||g" | sed -u "s|100|99|g"
done)| yad --progress --auto-close --no-buttons --window-icon="/usr/share/pixmaps/salineos-installer.png" --title="SalineOS Installer"  --text="                    Installing Optional Packages                    \n"

## Show debugging output
cat /tmp/packagekit-url-tmp

## Remove temp file between installs
rm /tmp/packagekit-url-tmp


done

## Language packages
for i in $LanguagePackages; do

pkcon -p -y install $i>>/tmp/packagekit-url-tmp &

sleep 2

(while [ "$(pidof pkcon)" != "" ]; do
CurrentOutput="$(tail --lines=1 /tmp/packagekit-url-tmp)"
echo "# $CurrentOutput" | sed -u "s|# Percentage:	||g" | sed -u "s|100|99|g"
done)| yad --progress --auto-close --no-buttons --window-icon="/usr/share/pixmaps/salineos-installer.png" --title="SalineOS Installer"  --text="                    Installing Optional Packages                    \n"

rm /tmp/packagekit-url-tmp

sleep 2

done

fi
## End installation section #######################################################################################

## Copy the live system to $Target
tail -f /usr/bin/salineos-installer | $Progress --text="                   Copying files to $TargetPart                   " --pulsate &

rsync -a / /Target --ignore-existing --exclude=/{Target,live,cdrom,mnt,proc,sys,media}

## Make needed aditional folders on the system.
mkdir -p /Target/{proc,mnt,sys,media/cdrom}

sleep 3

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="                    Setting up swap space                    " --pulsate &


if [ "$UseSwapFile" = "True" ]; then
 mkdir -p /Target/swap
 fallocate --l "$SwapFileSize"m /Target/swap/salineos-swap
 sleep 2
 mkswap /Target/swap/salineos-swap
 SwapFstab="/swap/salineos-swap"
else
 mkswap $Swap
 sleep 2
 blkid
 sleep 2
 TargetSwapUUID=$(blkid /dev/$Swap | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')
 SwapFstab="UUID=$TargetSwapUUID"
fi

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="Changing configuration files on installed system" --pulsate &

## Prepare a chroot envoirnment for post install changes

mount -o bind /proc /Target/proc
mount -o bind /dev /Target/dev
mount -o bind /sys /Target/sys
rm -rf /Target/etc/fstab

## Create a new fstab file for the system


if [ "$TargetHomePart" = "root" ]; then
cat > /Target/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

proc /proc proc defaults 0 0
# Root was on /dev/$TargetPart during install
UUID=$TargetPartUUID / $FilesystemType relatime,errors=remount-ro 0 1
# Swap space created during install
$SwapFstab none swap sw 0 0
# cdrom
$TargetCDRom /media/cdrom udf,iso9660 user,noauto,exec,utf8 0 0


FOO

else

cat > /Target/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

proc /proc proc defaults 0 0
# Root was on /dev/$TargetPart during install
UUID=$TargetPartUUID / $FilesystemType relatime,errors=remount-ro 0 1
# /dev/$TargetHomePart home
UUID=$TargetHomeUUID /home $HomeFilesystemType relatime 0 0
# Swap space created during install
$SwapFstab none swap sw 0 0
# cdrom
$TargetCDRom /media/cdrom udf,iso9660 user,noauto,exec,utf8 0 0


FOO

fi

## Remove diverted update-initramfs as live-initramfs makes it a dummy file when booting the livecd
if [ -f /Target/usr/sbin/update-initramfs.debian ]; then
 rm -f /Target/usr/sbin/update-initramfs
fi

## Remove diverted update-notifier as it is disabled by live-config
if [ -f /Target/usr/lib/update-notifier/apt-check.debian ]; then
 rm -f /Target/usr/lib/update-notifier/apt-check
fi

## Remove diverted anacron as it is disabled by live-config
if [ -f /Target/usr/sbin/anacron.debian ]; then
 rm -f /Target/usr/sbin/anacron
fi

## Restore original inittab as live-initramfs changes it
cp /Target/usr/share/sysvinit/inittab /Target/etc/inittab

rm /Target/etc/hostname
rm /Target/etc/hosts

echo "$TargetHostname" > /Target/etc/hostname
echo "127.0.0.1 localhost" > /Target/etc/hosts
echo "127.0.0.1 $TargetHostname" >> /Target/etc/hosts
touch /Target/etc/resolv.conf

sleep 2

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="             Setting up user account             " --pulsate &

## Remove auto login or enable it for the new user 
if [ "$RequirePassword" = "TRUE" ]; then
 sed -i -e 's/auto_login/#auto_login/g' /Target/etc/slim.conf
 sed -i -e 's/default_user/#default_user/g' /Target/etc/slim.conf
else
 sed -i -e "s|default_user user|default_user $TargetUser|g" /Target/etc/slim.conf
fi


DefaultGroups="audio,cdrom,dialout,floppy,video,plugdev,netdev,lp,scanner,disk,fuse,games,voice,sudo"

cat > /Target/usr/bin/TempScript <<FOO
#!/bin/bash

sed -i -e "s|download-folder=/home/user/Downloads|download-folder=/home/$TargetUser/Downloads|g" /etc/skel/.config/midori/config


userdel -f -r user
sed -i '/user/d' /etc/sudoers
groupadd -g 1000 $TargetUser
useradd -u 1000 -g 1000 -c "$TargetUserRealName,,," -G $DefaultGroups -s /bin/bash -m $TargetUser
echo -e "$TargetUserPassword2\n$TargetUserPassword2\n" | passwd $TargetUser
dpkg-divert --remove --rename --quiet /usr/lib/update-notifier/apt-check
dpkg-divert --remove --rename --quiet /usr/sbin/update-initramfs
dpkg-divert --remove --rename --quiet /usr/sbin/anacron
update-initramfs -t -c -k $(/bin/uname -r)
ln -sf /usr/share/zoneinfo/$TimeZone /etc/localtime

shadowconfig on

sed -i -e "s|download-folder=/home/$TargetUser/Downloads||g" /etc/skel/.config/midori/config

FOO

chmod 755 /Target/usr/bin/TempScript

sleep 1

chroot /Target /usr/bin/TempScript

sleep 2

rm /Target/usr/bin/TempScript
sleep 3

killall -KILL tail


## Install GRUB2
tail -f /usr/bin/salineos-installer | $Progress --text="         Installing and configuring GRUB2         " --pulsate &
chroot /Target chmod -x /etc/grub.d/20_memtest86+
chroot /Target grub-install --force --no-floppy "$GrubLocation"
sleep 2
chroot /Target update-grub
sleep 2


killall -KILL tail

## Unmount the target partition  
tail -f /usr/bin/salineos-installer | $Progress --text="                  Unmounting $TargetPart                  " --pulsate &

sleep 2
umount /Target/home
sleep 2
umount /Target/proc
sleep 2
umount /Target/dev
sleep 2
umount /Target/sys
sleep 2
umount /Target
sleep 2

killall -KILL tail

$Question --wrap --width=250 --text="$LASTDIALOG" 

if [ "$?" = 0 ]; then
 reboot
else
 exit 0
fi

}


FinishedMenu () {

Change=""

if [ "$AutoPart" = "Manual" ]; then
 if [ "$UseSwapFile" = "True" ]; then
  SwapFinished='Swap-File'
  SwapFinished2="A $SwapFileSize Megabytes $FMSWAP"
 else
  SwapFinished='Swap-Partition'
  SwapFinished2="$Swap $FMSWAP1"
 fi

RootPartition="Root-Partition"

 if [ "$Input" = "ext3" ]; then
  RootPartition2="$TargetPart $FMHOMEPART1 (erased) ext3 $FMHOMEPART2 root"
 else
  RootPartition2="$TargetPart $FMHOMEPART1 (erased) ext4 $FMHOMEPART2 root"
 fi

HomePartFinished="Home"

## Make sure TargetHomePart is set

if [ "$TargetHomePart" = "" ]; then
 TargetHomePart="root"
fi

 if [ "$TargetHomePart" = "root" ]; then
  HomePartFinished2="$FMHOMEPART4"
 else
  if [ "$FormatHome" = "True" ]; then
   if [ "$Input" = "ext3" ]; then
    HomePartFinished2="$TargetHomePart $FMHOMEPART1 (erased) ext3 $FMHOMEPART2 /home"
   else
    HomePartFinished2="$TargetHomePart $FMHOMEPART1 (erased) ext4 $FMHOMEPART2 /home"
   fi
  else
   HomePartFinished2="$TargetHomePart $FMHOMEPART3"
  fi
 fi
else
 SwapFinished='Swap-File'
 SwapFinished2="A $SwapFileSize Megabytes $FMSWAP"
 RootPartition="Use-Disk"
 RootPartition2="$PartDrive $FMROOT"
fi

if [ "$Internet" != "Continue" ]; then
if [ "$InstallCodec" = "FALSE" ]; then
 CodecsFinished="Install-Plugins"
 CodecsFinished2="$FMRESTRICTED1"
else
 CodecsFinished="Install-Plugins"
 CodecsFinished2="$FMRESTRICTED2"
fi
fi

UserFinished="User-Account"
UserFinished2="$FMUSER1 "$TargetUserRealName" $FMUSER2 "$TargetUser""

AutoLoginFinished="Auto-Login"
AutoLoginFinished2="$FMAUTOLOG "$RequirePassword""

HostnameFinished="Hostname"
HostnameFinished2="$FMHOSTNAME "$TargetHostname""

TimeZoneFinished="Time-Zone"
TimeZoneFinished2="$FMTIMEZONE "$TimeZone""

GrubFinished="Boot-Loader"
GrubFinished2="$FMGRUB "$GrubLoc""

if [ "$AutoPart" = "Auto" ]; then
Change=$($Menu --height=400 --column="Option" --column="Current Status" --text="$FINISHEDMENUTEXT" --button=$"gtk-quit:3" --button=$"$CHANGESELECTED:2" --button=$"$RUNBUTTON:5" "$CodecsFinished" "$CodecsFinished2" "$RootPartition" "$RootPartition2" "$SwapFinished" "$SwapFinished2" "$UserFinished" "$UserFinished2" "$AutoLoginFinished" "$AutoLoginFinished2" "$HostnameFinished" "$HostnameFinished2" "$TimeZoneFinished" "$TimeZoneFinished2" "$GrubFinished" "$GrubFinished2")
else
Change=$($Menu --height=400 --column="Option" --column="Current Status" --text="$FINISHEDMENUTEXT" --button=$"gtk-quit:3" --button=$"$CHANGESELECTED:2" --button=$"$RUNBUTTON:5" "$CodecsFinished" "$CodecsFinished2" "$RootPartition" "$RootPartition2" "$SwapFinished" "$SwapFinished2" "$HomePartFinished" "$HomePartFinished2" "$UserFinished" "$UserFinished2" "$AutoLoginFinished" "$AutoLoginFinished2" "$HostnameFinished" "$HostnameFinished2" "$TimeZoneFinished" "$TimeZoneFinished2" "$GrubFinished" "$GrubFinished2")
fi

ret="$?"

Change=$(echo "$Change" | awk -F '|' '{print $1}')
 
if [ "$ret" = "252" ]; then
 FinishedMenu
 exit 0 
elif [ "$ret" = "3" ]; then 
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   FinishedMenu
   exit 0
  fi
elif [ "$ret" = "5" ]; then
 rm -rf /tmp/Finished-Menu
 RunInstallation
 exit 0
elif [ "$Change" = "Swap-Partition" ]; then
 SelectSwapPart
 exit 0
elif [ "$Change" = "Root-Partition" ]; then
 SelectRootPart
 exit 0
elif [ "$Change" = "Swap-File" ]; then
 SwapFile
 exit 0
elif [ "$Change" = "Home" ]; then
 SelectHomePart
 exit 0
elif [ "$Change" = "Auto-Login" ]; then
  $Question --text="$REQUIREPASS2 "$TargetUser"?"
  if [ "$?" = "0" ]; then
   RequirePassword="TRUE"
   FinishedMenu 
   exit 0
  else
   RequirePassword="FALSE"
   FinishedMenu
   exit 0
  fi
elif [ "$Change" = "User-Account" ]; then
 UserSetup
 exit 0
elif [ "$Change" = "Hostname" ]; then
 SetHostname
 exit 0
elif [ "$Change" = "Time-Zone" ]; then
 SetTimeZone
 exit 0
elif [ "$Change" = "Boot-Loader" ]; then
 GrubSelect
 exit 0
elif [ "$Change" = "Use-Disk" ]; then
 ChooseDrive
 exit 0
elif [ "$Change" = "Install-Plugins" ]; then
 RestrictedMultimedia
 exit 0
elif [ "$Change" = "" ]; then
 $Info --text="$NOCHANGE" --button=$"gtk-ok:1"
 FinishedMenu
 exit 0
fi


rm -rf /tmp/Finished-Menu


}


GrubSelect () {

## Grub location

GrubLocation=""
GrubLoc=""

GrubLoc=$($Menu --width=300 --height=250 --column="$LOCATION" --column=' ' --button=$"gtk-quit:3" --button=$"gtk-ok:2" --text="$INSTALLGRUBTEXT\n" "${GrubMenu[@]}")

ret="$?"

if [ "$ret" = "252" ]; then
 GrubSelect
 exit 0 
elif [ "$ret" = "3" ]; then 
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   GrubSelect
   exit 0
  fi
elif [ "$GrubLoc" = "" ]; then
 $Info --text="$GRUBBLANK" --button=$"gtk-ok:1"
 GrubSelect
 exit 0
fi

GrubLoc=$(echo "$GrubLoc" | awk -F '|' '{print $1}')

if [ "$GrubLoc" != "root" ]; then
 GrubLocation="/dev/$GrubLoc"
else
 GrubLocation="/dev/$TargetPart"
fi

if [ "$Internet" != "Continue" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  FinishedMenu
  exit 0
 else
  RestrictedMultimedia
  exit 0
 fi
else
 touch /tmp/Finished-Menu
 FinishedMenu
fi


}


SetTimeZone () {

TimeZones=""

cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sort > /tmp/SalineOS-TimeZones
for i in $(cat /tmp/SalineOS-TimeZones); do
 TimeZones="$TimeZones $i"
done
rm /tmp/SalineOS-TimeZones

TimeZone=$(yad --on-top --width=300 --height=450 --center --list --column="$SELECTZONE:" --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png --button=$"gtk-ok:2" $TimeZones)

ret="$?"



if [ "$ret" = "252" ]; then
 SetTimeZone
 exit 0 
elif [ "$TimeZone" = "" ]; then
 $Info --text="$TIMEZONEBLANK" --button=$"gtk-ok:1"
 SetTimeZone
 exit 0
fi

TimeZone="$(echo $TimeZone | awk -F '|' '{print $1}')"

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 GrubSelect
 exit 0
fi

}


SetHostname () {


TargetHostname=""

TargetHostname=$($TextEntry --text="$HOSTNAMETEXT" --button=$"$ABOUTHOSTBUTTON:3" --button=$"gtk-ok:2")


ret="$?"

if [ "$ret" = "252" ]; then
 SetHostname
 exit 0
elif [ "$ret" = "3" ]; then
 $Info --text="$ABOUTHOST" --button=$"gtk-ok:1"
 SetHostname
 exit 0
elif [ "$TargetHostname" = "" ]; then
 $Info --text="$BLANKHOST" --width=200 --button=$"gtk-ok:1"
 SetHostname
 exit 0
fi


## Check if the user is an idiot :)
TestHostname=$(echo "$TargetHostname" | grep '[!@#$%&*()_+=~,.?:;*-+]')

if [ "$TestHostname" != "" ]; then
 $Info --text="$SPECCHAR" --width=200 --button=$"gtk-ok:1"
 SetHostname
 exit 0
fi

## Remove spaces just in case the user doesn't read >.>
TargetHostname="$(echo "$TargetHostname" | sed -e 's| ||g')"


if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SetTimeZone
 exit 0
fi


}

UserSetup () {


## Reset all variables just in case

UserStuff=""
TargetUserRealName=""
TargetUser=""
TargetUserPassword1=""
TargetUserPassword2=""
RequirePassword=""
UserStuff=$(yad --center --title="SalineOS Installer" --window-icon=/usr/share/pixmaps/salineos-installer.png --form --text="$SETUPUSER" --field="$USERREALNAME:" --field="Username:" --field="Password::H" --field="Re-enter Password::H" --field="$REQUIREPASS:CHK" --button=$"gtk-quit:3" --button=$"gtk-ok:2")

ret="$?"

if [ "$ret" = "3" ]; then
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   UserSetup
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 UserSetup
 exit 0
fi

TargetUserRealName="$(echo "$UserStuff" | awk -F '|' '{print $1}')"
TargetUser="$(echo "$UserStuff" | awk -F '|' '{print $2}')"
## Change capital letters in username to lowercase
TargetUser="$(echo "$TargetUser" | awk '{print tolower ($0)}')"
TargetUserPassword1="$(echo "$UserStuff" | awk -F '|' '{print $3}')"
TargetUserPassword2="$(echo "$UserStuff" | awk -F '|' '{print $4}')"
RequirePassword="$(echo "$UserStuff" | awk -F '|' '{print $5}')"


if [ "$TargetUserRealName" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="$REALNAMEBLANK"
 UserSetup
 exit 0
elif [ "$TargetUser" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="$UNBLANK"
 UserSetup
 exit 0
elif [ "$TargetUserPassword1" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="$EMPTYPASS"
 UserSetup
 exit 0
elif [ "$TargetUserPassword2" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="$EMPTYPASS"
 UserSetup
 exit 0
elif [ "$TargetUserPassword1" != "$TargetUserPassword2" ]; then
 $Info --button=$"gtk-ok:1" --text="$PASSMATCH"
 UserSetup
 exit 0
fi

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SetHostname
 exit 0
fi


}

SelectHomePart () {

HomePartMenu=""
Partitions=""

Partitions="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v "Extended" | grep -v "$TargetPart" | grep -v "swap" | grep -v 'p1' | grep -v "extended" | grep -v "Hidden" | cut -d " " -f1 | sed 's|/dev/||g')"

for i in $Partitions; do
## Get the label of the disk if available
 Label=$(find /dev/disk/by-label/* -printf %f" "%l\\n | grep "$i" | awk '{print $1}' | sed -e 's|\\x20| |g')

if [ "$Label" = "" ]; then
 Label=' '
else
 Label="$Label     "
fi

PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
## Part Drive Size is in blocks, first we need to convert the blocks to bytes
## Don't bother with extended partitions
if [ "$PartDriveSize" != "1" ]; then
  BlockSize=$(df -P /dev/$i | grep "blocks" | awk '{print $2}' | awk -F '-' '{print $1}')
## Multiply blocks by block size to get bytes
 SizeInBytes=$(($PartDriveSize * $BlockSize))
## Divide Bytes by 1024 to get Kilobytes
 SizeInKB=$(($SizeInBytes / 1024))
## Divide Kilobytes by 1024 to get Megabytes
 SizeInMB=$(($SizeInKB / 1024))
## Divide Megabytes by 1024 to get Gigabytes
 SizeInGB=$(($SizeInMB / 1024))
## Bash always removes the decimels causing it to round down, this makes it round up.
 SizeInGB=$(($SizeInGB + 1))
fi

if [ "$(echo "$i" | grep [0-9] )" != "" ]; then
 if [ "$PartDriveSize" != "1" ]; then
  if [ "$HomePartMenu" = "" ]; then
   HomePartMenu=("$i" "$Label" "$SizeInGB" "$SizeInMB")
  else
   HomePartMenu=("${HomePartMenu[@]}" "$i" "$Label" "$SizeInGB" "$SizeInMB")
  fi
 fi
fi

done
HomePart=$($Menu --width="575" --text="                            $SEPERATEHOME\n" --height=400 --column="Name" --column="$PARTLABEL" --column="Approx. Size In GiB" --column="Approx. Size In MiB" --button=$"gtk-quit:3" --button=$"$USBUTTON:2" --button=$"$PUTHOME:5" "${HomePartMenu[@]}")

ret="$?"

if [ "$ret" = "252" ]; then
 SelectHomePart
 exit 0
elif [ "$ret" = "3" ]; then
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectSwapPart
   exit 0
  fi
elif [ "$ret" = "5" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  TargetHomePart="root"
  FinishedMenu
  exit 0
 fi
 TargetHomePart="root"
 UserSetup
 exit 0
elif [ "$HomePart" = "" ]; then
 SelectHomePart
 exit 0
else
 TargetHomePart=$(echo "$HomePart" | awk -F '|' '{print $1}')
 $Question --text="$FORMATHOME, $TargetHomePart?"
  if [ "$?" = "0" ]; then
   FormatHome="True"
  else
   FormatHome="False"
  fi
fi

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
UserSetup
exit 0
fi


}



SelectSwapPart () {

SwapPartMenu=""
Swap=""
BlockSize=""

## Find swap partitions and find out which to use.
TargetSwap=$(fdisk -l | grep "swap" | cut -d " " -f1)
TargetSwap=$(echo "$TargetSwap" | sed -r "s/\/dev\///g")


for i in $TargetSwap; do

PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')

## Part Drive Size is in blocks, first we need to convert the blocks to bytes
BlockSize=$(df -P /dev/$i | grep "blocks" | awk '{print $2}' | awk -F '-' '{print $1}')
## Multiply blocks by block size to get bytes
 SizeInBytes=$(($PartDriveSize * $BlockSize))
## Divide Bytes by 1024 to get Kilobytes
 SizeInKB=$(($SizeInBytes / 1024))
## Divide Kilobytes by 1024 to get Megabytes
 SizeInMB=$(($SizeInKB / 1024))
## Divide Megabytes by 1024 to get Gigabytes
 SizeInGB=$(($SizeInMB / 1024))
## Bash always removes the decimels causing it to round down, this makes it round up.
 SizeInGB=$(($SizeInGB + 1))

if [ "$(echo "$i" | grep [0-9] )" != "" ]; then
 if [ "$SwapPartMenu" = "" ]; then
  SwapPartMenu=("$i" "$SizeInGB" "$SizeInMB")
 else
  SwapPartMenu=("${SwapPartMenu[@]}" "$i" "$SizeInGB" "$SizeInMB")
 fi
fi

done


Swap=$($Menu --width=415 --height=250 --text="            $SELECTSWAPPART            \n" --column="$NAME" --column="Approx. Size In GiB" --column="Approx. Size In MiB" --button=$"gtk-quit:3" --button=$"$USFBUTTON:5" --button=$"$USBUTTON:2" "${SwapPartMenu[@]}")

ret="$?"



if [ "$ret" = "3" ]; then
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectSwapPart
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 SelectSwapPart
 exit 0 
elif [ "$ret" = "5" ]; then
 SwapFile
 exit 0
elif [ "$Swap" = "" ]; then
 SelectSwapPart
 exit 0
elif [ -f /tmp/Finished-Menu ]; then
 Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
 FinishedMenu
 exit 0
else
 HomePartTest="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v 'p1' | grep -v "Extended" | grep -v "$TargetPart" | grep -v "Swap")"
 if [ "$HomePartTest" != "" ]; then
  Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
  SelectHomePart
  exit 0
 fi
 Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
 UserSetup
 exit 0
fi
 
}

SwapFile () {

SwapFileSize=""

if [ "$AutoPart" = "Auto" ]; then
SwapFileSize=$($Menu --column="Size" --column=" " --text="  $SWAPFILETXT" --button=$"$CONTINUEBUTTON:2" 8 Megabytes 32 Megabytes 64 Megabytes 128 Megabytes 256 Megabytes 512 Megabytes 1024 Megabytes 2048 "Megabytes $REC" 3072 Megabytes 4096 Megabytes 5120 Megabytes 6144 Megabytes 8192 Megabytes 16384 Megabytes 30000 Megabytes --height=350 ) 
else
SwapFileSize=$($Menu --column="Size" --column=" " --text="  $SWAPFILETXT" --button=$"$USESWAPPART:3" --button=$"$CONTINUESWAP:2" 8 Megabytes 32 Megabytes 64 Megabytes 128 Megabytes 256 Megabytes 512 Megabytes 1024 Megabytes 2048 "Megabytes It is recommended to choose this setting" 3072 Megabytes 4096 Megabytes 5120 Megabytes 6144 Megabytes 8192 Megabytes 16384 Megabytes 30000 Megabytes --height=350 ) 
fi

ret="$?"

if [ "$ret" = "3" ]; then
 UseSwapFile="False"
 SelectSwapPart
 exit 0
elif [ "$ret" = "252" ]; then
 SwapFile
 exit 0 
elif [ "$SwapFileSize" = "" ]; then
 SwapFile
 exit 0
else
 UseSwapFile="True"
 SwapFileSize=$(echo "$SwapFileSize" | awk -F '|' '{print $1}') 
  if [ -f /tmp/Finished-Menu ]; then
   FinishedMenu
   exit 0
  elif [ "$AutoPart" = "Auto" ]; then
   UserSetup
   exit 0
  fi
 HomePartTest="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v 'p1' | grep -v "Extended" | grep -v "$TargetPart" | grep -v "Swap")"
 if [ "$HomePartTest" != "" ]; then
  SelectHomePart
  exit 0
 fi
 UserSetup
 exit 0
fi

}




## Choose the partition to install to

SelectRootPart () { 

PartDriveMenu=""

Partitions=$(cat /proc/partitions | grep -v loop | grep -v "Extended" | grep -v "extended" | grep -v "swap" | grep -v "Swap" | grep -v "Hidden" | grep -v major | grep -v "^$" | awk '{ print $4}' | grep -v 'p1')

for i in $Partitions; do
## Get the label of the disk if available
Label=$(find /dev/disk/by-label/* -printf %f" "%l\\n | grep "$i" | awk '{print $1}' | sed -e 's|\\x20| |g')

if [ "$Label" = "" ]; then
 Label=' '
else
 Label="$Label     "
fi

PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
## Part Drive Size is in blocks, first we need to convert the blocks to bytes
## Don't bother with extended partitions
if [ "$PartDriveSize" != "1" ]; then
  BlockSize=$(df -P /dev/$i | grep "blocks" | awk '{print $2}' | awk -F '-' '{print $1}')
## Multiply blocks by block size to get bytes
 SizeInBytes=$(($PartDriveSize * $BlockSize))
## Divide Bytes by 1024 to get Kilobytes
 SizeInKB=$(($SizeInBytes / 1024))
## Divide Kilobytes by 1024 to get Megabytes
 SizeInMB=$(($SizeInKB / 1024))
## Divide Megabytes by 1024 to get Gigabytes
 SizeInGB=$(($SizeInMB / 1024))
## Bash always removes the decimels causing it to round down, this makes it round up.
 SizeInGB=$(($SizeInGB + 1))
fi

if [ "$(echo "$i" | grep [0-9] )" != "" ]; then
 if [ "$PartDriveSize" != "1" ]; then
  if [ "$PartDriveMenu" = "" ]; then
   PartDriveMenu=("$i" "$Label" "$SizeInGB" "$SizeInMB")
  else
   PartDriveMenu=("${PartDriveMenu[@]}" "$i" "$Label" "$SizeInGB" "$SizeInMB")
   fi
 fi
fi

done


TargetPart=$($Menu --height=300 --width=575 --column="$NAME" --column="$PARTLABEL" --column="Approx. Size in GiB" --column="Approx. Size in MiB" --button=$"gtk-quit:3" --button=$"Use Selected:2" --text="$ROOTPART" "${PartDriveMenu[@]}" )

ret="$?"



if [ "$ret" = "252" ]; then
 SelectRootPart
 exit 0
elif [ "$ret" = "3" ]; then
   $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectRootPart
   exit 0
  fi
elif [ "$TargetPart" = "" ]; then
 SelectRootPart
 exit 0
fi

TargetPart=$(echo "$TargetPart" | awk -F '|' '{print $1}')


if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SwapFile
 exit 0
fi


}


## Choose the drive to partition

ChooseDrive () { 

GrubMenu=""
PartDriveMenu=""
PartDrive=""

Drives=$(cat /proc/partitions | grep -v loop | grep -v major | grep -v "^$" | awk '{print $4}' | grep -v "[0-9]")

for i in $Drives; do
PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
## Part Drive Size is in blocks, first we need to convert the blocks to bytes
## Don't bother with extended partitions

BlockSize=$(df -P /dev/$i | grep "blocks" | awk '{print $2}' | awk -F '-' '{print $1}')
## Multiply blocks by block size to get bytes
 SizeInBytes=$(($PartDriveSize * $BlockSize))
## Divide Bytes by 1024 to get Kilobytes
 SizeInKB=$(($SizeInBytes / 1024))
## Divide Kilobytes by 1024 to get Megabytes
 SizeInMB=$(($SizeInKB / 1024))
## Divide Megabytes by 1024 to get Gigabytes
 SizeInGB=$(($SizeInMB / 1024))
## Bash always removes the decimels causing it to round down, this makes it round up.
 SizeInGB=$(($SizeInGB + 1))

if [ "$(echo "$i" | grep [0-9] )" = "" ]; then
 if [ "$PartDriveMenu" = "" ]; then
  PartDriveMenu=( "$i" "$SizeInGB" "$SizeInMB" )
 else
  PartDriveMenu=( "${PartDriveMenu[@]}" "$i" "$SizeInGB" "$SizeInMB" )
 fi
 if [ "$GrubMenu" = "" ]; then
  GrubMenu=("$i" "Master boot record of disk")
 else
  GrubMenu=("${GrubMenu[@]}" "$i" "Master boot record of disk")
 fi
fi
done

GrubMenu=("${GrubMenu[@]}" "root" "Root Partition (Advanced)")

if [ "$AutoPart" = "Auto" ]; then
PartDrive=$($Menu --width=375 --height=300 --column="Drive" --column="Approx. Size In GiB" --column="Approx. Size In MiB" --text="               $ERASEANDUSE               \n"  --button=$"gtk-quit:3" --button=$"gtk-ok:2" "${PartDriveMenu[@]}" )
else
PartDrive=$($Menu --width=375 --height=300 --column="Drive" --column="Approx. Size In GiB" --column="Approx. Size In MiB" --text="                 $PARTDRIVE               \n"  --button=$"gtk-quit:3" --button=$"gtk-ok:2" "${PartDriveMenu[@]}" )
fi

ret="$?"



if [ "$ret" = "3" ]; then
  $Question --text="$CANCELINSTALLTEXT"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   ChooseDrive
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 ChooseDrive
 exit 0
elif [ "$PartDrive" = "" ]; then
 ChooseDrive
 exit 0
fi 

PartDrive=$(echo "$PartDrive" | awk -F '|' '{print $1}')

## Launch GParted
if [ "$AutoPart" != "Auto" ]; then
 gparted /dev/$PartDrive
fi

if [ "$AutoPart" = "Auto" ]; then
 SwapFile
 exit 0
else
 SelectRootPart
 exit 0
fi

}





## Ask the user if they wish to use automatic partitioning.

AutoPartitioning () {
$Info --width=400 --wrap --text="$PARTITIONINGTEXT" --button=$"$MANUALPART:3" --button=$"$AUTOPART:5"

ret="$?"

if [ "$ret" = "252" ]; then
 AutoPartitioning 
 exit 0
elif [ "$ret" = "5" ]; then
 AutoPart="Auto"
 ChooseDrive
 exit 0
elif [ "$ret" = "3" ]; then
 AutoPart="Manual"
 ChooseDrive
 exit 0
fi 

}


RestrictedMultimedia () {

InstallCodec=""

yad --wrap --height=300 --width=500 --center --button=$"$READADOBE:3" --button=$"$DECLINE:5" --button=$"$AGREEINSTALL:9" --title=SalineOS-Installer --window-icon=/usr/share/pixmaps/salineos-installer.png --text="$RESTRICTEDTEXT"

ret="$?"

if [ "$ret" = "252" ]; then
 RestrictedMultimedia
 exit 0
elif [ "$ret" = "5" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  InstallCodec="FALSE"
  FinishedMenu
  exit 0
 else
  InstallCodec="FALSE"
  touch /tmp/Finished-Menu
  FinishedMenu
  exit 0
 fi
elif [ "$ret" = "3" ]; then
 yad --list --column='   ' --on-top --title="Adobe EULA" --window-icon=/usr/share/pixmaps/salineos-installer.png --height="550" --width=700 --wrap --button=$"gtk-ok:5" "$(cat /etc/salineos-installer/adobeEULA)"
 RestrictedMultimedia
 exit 0
elif [ "$ret" = "9" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  InstallCodec="TRUE"
  FinishedMenu
  exit 0
 else
  InstallCodec="TRUE"
  touch /tmp/Finished-Menu
  FinishedMenu
  exit 0
 fi
fi 

}

ChangeLanguage () {

yad --title="SalineOS Installer" --width="250" --wrap --window-icon="/usr/share/pixmaps/salineos-installer.png" --text="Would you like to change the system language from the default English US?" --button=$"gtk-no:3" --button=$"gtk-yes:5"

ret="$?"

if [ "$ret" = "5" ]; then
 /usr/bin/localizesys Installer
fi

## Check to see if we have a translation for their language

LanguageLess="$(echo "$LANG" | awk -F '.' '{print $1}')"

if [ -f /etc/salineos-installer/Translations/$LanguageLess ]; then
 . /etc/salineos-installer/Translations/$LanguageLess
else
 . /etc/salineos-installer/Translations/en_US
fi


AutoPartitioning
exit 0
}

## Tell the user that there are instructions in the user manual 

Instruction (){ 

$Info --text="Complete installation instructions are included\nin the user manual if needed." '--button=gtk-ok:1'


ChangeLanguage
exit 0


}




## Check for internet connectivity and inform the user that some features require connectivity

InternetTest2 () {

$Info --width=200 --wrap --button=$"Retry connection:5" --button=$"Continue:3" --text="No internet connection detected, some features of this installer will be disabled.\n\nYou can configure your network settings by right clicking on the network icon in the upper right hand corner, on the top panel and selecting Edit Connections...\n\n"

ret="$?"

if [ "$ret" = "3" ]; then
 Internet=Continue
 Instruction
 exit 0
elif [ "$ret" = "252" ]; then
 InternetTest2 
else
 InternetTest
 exit 0
fi

}



InternetTest () {



tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="Checking for an active internet connection, please wait.\n" &

TestInternet="$(httping -g http://www.google.com -c 1 -t 15)"
Internet="$(echo "$TestInternet" | grep "0.00% failed")"

## Remove installer icon from desktop
rm -rf /etc/skel/Desktop/salineos-installer.desktop

sleep 4
killall -KILL tail

if [ "$Internet" = "" ]; then 
 InternetTest2
 exit 0
else
 Instruction
 exit 0
fi


}

InternetTest

exit

