#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
# Copyright 2012 Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 


Remove () {

if [ "$Delete" != "" ]; then
 rm -rf "$HOME/.webapps/desktopfiles/$Delete"
 rm -rf "$HOME/.local/share/applications/$Delete"
fi

if [ "$Name" != "" ]; then
 rm -rf "$HOME/.webapps/$Name"
fi


exit 0
}

Delete () {

DeleteMeArray=("")

## Huzzah!
for i in $(ls $HOME/.webapps/desktopfiles); do 
 NewEntry=$(grep -B 0 "Name=" "$HOME/.webapps/desktopfiles/$i" | awk -F 'Name=' '{print $2}') 
 if [ "$DeleteMeArray" = "" ]; then
  DeleteMeArray=( "$NewEntry" "$i" )
 else 
  DeleteMeArray=( "$NewEntry" "$i" "${DeleteMeArray[@]}" )
 fi
done

DeleteMe=$(yad --title='            ' --window-icon="midori" --list --width=250 --height=300 --no-headers --column=' ' --column=' ' --hide-column="2" --text="Select the entry you wish to remove" --button=$"gtk-quit:3" --button=$"gtk-ok:2" "${DeleteMeArray[@]}")

ret="$?"

if [ "$ret" = "252" ]; then
 exit 0
elif [ "$ret" = "3" ]; then
 exit 0
elif [ "$DeleteMe" = "" ]; then
 yad --title='        ' --text="No entry was selected for removal" --button=$"gtk-ok:1"
 Delete
 exit 0
fi

Name=$(echo "$DeleteMe" | awk -F '|' '{print $1}' | sed 's| ||g')
Delete=$(echo "$DeleteMe" | awk -F '|' '{print $2}')

Remove


}

Create () { 


New=$(yad --window-icon="midori" --title='          ' --form --field="Enter the URL to open:TXT" 'http://www.' --field="Enter the name to be displayed in the menu:TXT" --button=$"gtk-cancel:3" --button=$"gtk-ok:2")

ret="$?"

if [ "$ret" = "3" ]; then
 exit 0
elif [ "$ret" = "252" ]; then
 exit 0 
fi

NewURL=$(echo "$New" | awk -F '|' '{print $1}')

## Remove new lines from URL, just in case.
NewURL=$(echo "$NewURL" | sed 's|\n||g')

Name=$(echo "$New" | awk -F '|' '{print $2}')

## Remove new lines from name, just in case.
Name=$(echo "$Name" | sed 's|\n||g')


## Set a variable of the name without spaces, this is used heavily.
Name2=$(echo "$Name" | sed 's| ||g')

## Make the needed directories
mkdir -p "$HOME/.webapps/desktopfiles"
mkdir -p "$HOME/.webapps/$Name2"
mkdir -p "$HOME/.webapps/$Name2/config"
mkdir -p "$HOME/.webapps/$Name2/cache"
 
## Copy template to webapps directory
cp -f /etc/webapps/template "$HOME/.webapps/desktopfiles"
echo "Name=$Name">>"$HOME/.webapps/desktopfiles/template"

sleep 2

AgeArray=( "1 Hour"!"1 Day"!"1 Week"!"1 Month"!"1 Year" )

Options=$(yad --form --window-icon="midori" --text="Select the options to set for this Midori instance" --title=' ' --field="Show menu bar:CHK"  --field="Show navigation bar:CHK"  --field="Show bookmark bar:CHK" --field="Show status bar:CHK"  --field="Show side panel:CHK"  --field="Enable HTML5 local storage support:CHK"  --field="Enable offline web application cache:CHK"  --field="Clear private data on exit:CHK" --field="Delete old cookies after:CB" --field="Delete History after:CB" FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE "${AgeArray[@]}" "${AgeArray[@]}" --button=$"gtk-ok:2")


EnableMenuBar=$(echo "$Options" | awk -F '|' '{print $1}')
EnableNavBar=$(echo "$Options" | awk -F '|' '{print $2}')
EnableBookmarkBar=$(echo "$Options" | awk -F '|' '{print $3}')
EnableStatusBar=$(echo "$Options" | awk -F '|' '{print $4}')
EnablePanel=$(echo "$Options" | awk -F '|' '{print $5}')
EnableHTMLStorage=$(echo "$Options" | awk -F '|' '{print $6}')
EnableOffline=$(echo "$Options" | awk -F '|' '{print $7}')
ClearPrivateData=$(echo "$Options" | awk -F '|' '{print $8}')
DeleteCookiesAfter=$(echo "$Options" | awk -F '|' '{print $9}')
DeleteHistoryAfter=$(echo "$Options" | awk -F '|' '{print $10}')

if [ "$EnableMenuBar" = "TRUE" ]; then
 MenuBar='show-menubar=true'
else
 MenuBar='show-menubar=false'
fi
if [ "$EnableNavBar" = "TRUE" ]; then
 NavigationBar='show-navigationbar=true'
else
 NavigationBar='show-navigationbar=false'
fi
if [ "$EnableBookmarkBar" = "TRUE" ]; then
 BookmarkBar="show-bookmarkbar=true"
else
 BookMarkBar="show-bookmarkbar=false"
fi
if [ "$EnableStatusBar" = "TRUE" ]; then
 StatusBar="show-statusbar=true"
else
 StatusBar="show-statusbar=false"
fi
if [ "$EnablePanel" = "TRUE" ]; then
 Panel="show-panel=true"
else
 Panel="show-panel=false"
fi
if [ "$EnableHTMLStorage" = "TRUE" ]; then
 Html5="enable-html5-database=true"
 Html5More="enable-html5-local-storage=true"
else
 Html5="enable-html5-database=true"
 Html5More="enable-html5-local-storage=true"
fi
if [ "$EnableOffline" = "TRUE" ]; then
 OfflineCache="enable-offline-web-application-cache=true"
else
 OfflineCache="enable-offline-web-application-cache=false"
fi
if [ "$ClearPrivateData" = "TRUE" ]; then
 PrivateData="clear-private-data=32"
 DataArray=("FALSE" "page-icons" "Page Icons" "FALSE" "formhistory" "Form History" "FALSE" "web-cookies" "Web Cookies" "FALSE" "flash-cookies" "Flash Cookies" "FALSE" "html5-databases" "HTML5 Databases" "FALSE" "web-cache" "Website Cache" "FALSE" "offline-appcache" "Offline Application Cache")
 ToClear=$(yad --title='     ' --window-icon="midori" --width=300 --height=275 --list --checklist --multiple --no-headers  --column=' ' --column=' ' --column=' '  --print-column=2 --hide-column=2 --text="Select the private data you want cleared on exit." --button=$"gtk-cancel:3" --button=$"gtk-ok:2" "${DataArray[@]}")

ret="$?"

if [ "$ToClear" != "" ]; then
 ToClear=$(echo "$ToClear" | sed 's/|/,/g' | tr -d '\n')
fi

if [ "$ret" = "3" ]; then
 PrivateData=""
 ToClear=""
elif [ "$ret" = "252" ]; then 
 exit 0
else
 PrivateData2="clear-data=$ToClear"
fi

fi

case "$DeleteCookiesAfter" in
"1 Hour" )
  CookieAge="maximum-cookie-age=0"
;;
"1 Day" )
  CookieAge="maximum-cookie-age=1"
;;
"1 Week" )
  CookieAge="maximum-cookie-age=7"
;;
"1 Month" )
  CookieAge="maximum-cookie-age=30"
;;
"1 Year" )
  CookieAge="maximum-cookie-age=365"
;;
esac



case "$DeleteHistoryAfter" in
"1 Hour" )
  HistoryAge="maximum-history-age=0"
;;
"1 Day" )
  HistoryAge="maximum-history-age=1"
;;
"1 Week" )
  HistoryAge="maximum-history-age=7"
;;
"1 Month" )
  HistoryAge="maximum-history-age=30"
;;
"1 Year" )
  HistoryAge="maximum-history-age=365"
;;
esac


ExecLine="Exec=$HOME/.webapps/$Name2/$Name2"
Run="$HOME/.webapps/$Name2/$Name2"
echo "$ExecLine">>"$HOME/.webapps/desktopfiles/template"

## Allow the user to enable extensions.
ExtensionsArray=(\
 "FALSE" "Advertisement Blocker" "Automatically blocks advertisements from appearing" "libadblock.so=true"\
 "FALSE" "User Addons" "User scripts and user styles" "libaddons.so=true"\
 "FALSE" "Colorful Tabs" "Tint each tab a distinct color" "libcolorful-tabs.so=true"\
 "FALSE" "Copy Addresses" "Copies the addresses of all tabs to clipboard" "libcopy-tabs.so=true"\
 "FALSE" "Cookie Manager" "View and delete cookies" "libcookie-manager.so=true"\
 "FALSE" "Feed Panel" "Read Atom and RSS feeds" "libfeed-panel.so=true"\
 "FALSE" "Form History" "Stores history of entered form data" "libformhistory.so=true"\
 "FALSE" "History List" "Move to the last used tab when switching or closing tabs" "libhistory-list.so=true"\
 "FALSE" "Statusbar Features" "Toggle features on web pages on and off" "libstatusbar-features.so=true"\
 "FALSE" "Statusbar Clock" "Show time and date in the statusbar" "libstatus-clock.so=true"\
 "FALSE" "Keyboard Shortcuts" "View and edit Midori keyboard shortcuts" "libshortcuts.so=true"\
 "FALSE" "Tab Panel" "Show tabs in a vertical panel" "libtab-panel.so=true"\
 "FALSE" "Icons Only" "Show only icons on tabs" "libtabs-minimized.so=true"\
 "FALSE" "Toolbar Editor" "Easily edit the toolbar (Navigationbar) layout" "libtoolbar-editor.so=true")

Extensions=$(yad --title='     ' --window-icon="midori" --width=625 --height=450 --list --checklist --multiple --column=' '  --column='Name' --column='Description' --column=' ' --print-column=4 --hide-column=4 --text="Select the extensions you want to enable." --button=$"gtk-quit:3" --button=$"gtk-ok:2" "${ExtensionsArray[@]}")

 ret="$?"

if [ "$Extensions" != "" ]; then
 Extensions=$(echo "$Extensions" | sed 's/|//g')
fi

if [ "$ret" = "3" ]; then
 exit 0
elif [ "$ret" = "252" ]; then 
 exit 0
fi

## Remove old versions if they exist
if [ -f "$HOME/.webapps/$Name2/$Name2" ]; then
 rm "$HOME/.webapps/$Name2/$Name2"
fi

if [ -f "$HOME/.webapps/$Name2/config/config" ]; then
 rm "$HOME/.webapps/$Name2/config/config"
fi

## Create the New configuration file
cat > "$HOME/.webapps/$Name2/config/config" <<FOO
[settings]
default-encoding=ISO-8859-1
enable-site-specific-quirks=true
last-window-width=800
last-window-height=600
last-window-state=MIDORI_WINDOW_MAXIMIZED
last-panel-position=167
last-panel-page=2
$MenuBar
$NavigationBar
$BookMarkBar
$StatusBar
$Panel
toolbar-items=TabNew,Back,Forward,Next,ReloadStop,BookmarkAdd,Location,Search,Panel,
load-on-startup=MIDORI_STARTUP_BLANK_PAGE
homepage=file:///usr/share/doc/midori/faq.html
text-editor=mousepad %f
news-aggregator=icedove %u
location-entry-search=https://duckduckgo.com/?q=%s&t=saline
$Html5
$Html5More
$OfflineCache
$CookieAge
$HistoryAge
user-agent=Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-us) AppleWebKit/535+ (KHTML, like Gecko) Version/5.0 Safari/535.4+ Midori/0.4
$PrivateData
$PrivateData2

[extensions]
$Extensions

FOO



## Create the startup script
cat > "$HOME/.webapps/$Name2/$Name2" <<FOO

#!/bin/bash

XDG_CACHE_HOME="/home/anthony/.webapps/$Name2/cache" midori "$NewURL" --config="/home/anthony/.webapps/$Name2/config"

if [ -f "$HOME/.webapps/$Name2/config/session.xbel" ]; then
 rm "$HOME/.webapps/$Name2/config/session.xbel"
fi

exit

FOO

chmod +x "$HOME/.webapps/$Name2/$Name2"

sleep 1


$Run &

yad --window-icon="midori" --on-top  --title='     ' --text="Please allow the page to fully load and\nthen press ok to finish installation." --button=$"gtk-ok:1"

## Remove the duck duck go icon, just in case :)
if [ -f $HOME/.webapps/$Name2/cache/midori/icons/69579f75125a3d95fc9f8ba97dcb2b32.ico ]; then
 rm "$HOME/.webapps/$Name2/cache/midori/icons/69579f75125a3d95fc9f8ba97dcb2b32.ico"
fi

HashedIconName=$(ls -m $HOME/.webapps/$Name2/cache/midori/icons | awk -F ',' '{print $1}')

NewIcon="$HOME/.webapps/$Name2/cache/midori/icons/$HashedIconName"

if [ "$HashedIconName" != "" ]; then
 cp -f "$NewIcon" "$HOME/.webapps/$Name2"
 mv -f "$HOME/.webapps/$Name2/$HashedIconName" "$HOME/.webapps/$Name2/$Name2.ico"
 Icon="Icon=$HOME/.webapps/$Name2/$Name2.ico"
else
 Icon="Icon=midori"
fi

echo "$Icon">>"$HOME/.webapps/desktopfiles/template"

DesktopName=$(echo "$NewURL" | sed 's|/||g')

cp -f "$HOME/.webapps/desktopfiles/template" "$HOME/.local/share/applications/$DesktopName.desktop"
mv -f "$HOME/.webapps/desktopfiles/template" "$HOME/.webapps/desktopfiles/$DesktopName.desktop"


exit 0

}

MainMenu () {


yad --title='          ' --window-icon="midori" --text="What would you like to do?\n" --button=$"Delete Entry:3" --button=$"Create Entry:5"

ret="$?"

if [ "$ret" = "252" ]; then
 exit 0
elif [ "$ret" = "3" ]; then
 Delete
 exit 0
elif [ "$ret" = "5" ]; then
 Create
 exit 0
fi

}

MainMenu
exit 0
