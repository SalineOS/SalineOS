#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
# Copyright 2012 Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 

## Load translations

LanguageLess="$(echo "$LANG" | awk -F '.' '{print $1}')"

if [ -f /etc/clean/Translations/$LanguageLess ]; then
 . /etc/clean/Translations/$LanguageLess
else
 . /etc/clean/Translations/en_US
fi

Icon="--window-icon=/usr/share/pixmaps/clean.png"

Progress='yad --center --progress --auto-close --title=Clean --no-buttons'

tail -f /usr/bin/Clean | $Progress $Icon --pulsate --text="     $PCALC     " &

FlashCookieSize=$(du -chs --apparent-size $HOME/.adobe $HOME/.macromedia/Flash_Player | grep 'total' | awk '{print $1}')

PackageCacheSize=$(du -chs --apparent-size /var/cache/apt/archives | grep 'total' | awk -F ' ' '{print $1}')

## Calculate the size for removing the users xsession errors and rotated system logs.

rm -rf /tmp/Clean-Logs

ls /var/log | grep [1-9] | grep -v "exim4">>/tmp/Clean-Logs

for i in $(cat /tmp/Clean-Logs); do
 TempLogName="/var/log/$i"
 LogFiles="$TempLogName $LogFiles"
done

LogFiles="$LogFiles $HOME/.xsession-errors"

LogsSize=$(du -chs --apparent-size $LogFiles)

LogsSize=$(echo "$LogsSize" | grep 'total' | awk '{print $1}')

## End Log size code

ThumbnailsSize=$(du -chs --apparent-size $HOME/.thumbnails | grep 'total' | awk -F ' ' '{print $1}')

## Calculate the size saved by removing un-needed packages

PackageList=$(apt-get -s autoremove | grep '  ' | grep -v "This is only a simulation" | grep -v "root privileges for real" | grep -v "Keep also in mind that locking" | grep -v "depend on the relevance to the real")

if [ "$PackageList" = "" ]; then
 FinalSize="0"
else
 for i in $PackageList; do
  SizeStart=$(aptitude show "$i" | grep "Uncompressed Size" | awk -F ':' '{print $2}')
  if [ "$(echo "$SizeStart" | grep "M")" != "" ]; then 
   if [ "$(echo $SizeTemp | grep ',')" != "" ]; then
     SizeTemp=$(echo $SizeTemp | sed -e "s|,||g")
    fi
    SizeTemp=$(echo "$SizeStart" | awk -F ' ' '{print $1}')
    if [ "$(echo $SizeTemp | grep '.')" != "" ]; then
     SizeTemp=$(echo $SizeTemp | awk -F '.' '{print $1}')
    fi 
   FinalSize=$(($FinalSize + $SizeTemp))
  else 
   SizeTemp=$(echo "$SizeStart" | awk -F ' ' '{print $1}')
    if [ "$(echo $SizeTemp | grep ',')" != "" ]; then
     SizeTemp=$(echo $SizeTemp | sed -e "s|,||g")
    fi
    if [ "$(echo $SizeTemp | grep '.')" != "" ]; then
     SizeTemp=$(echo $SizeTemp | awk -F '.' '{print $1}')
    fi
   SizeInM=$(($SizeTemp/1024))
   FinalSize=$(($FinalSize + $SizeInM))
  fi
 done
fi

## Determine if there are old kernels to remove 
## Caculate their size if there are.

RunningKernel=$(uname -r)

KernelList="$(ls /lib/modules | grep -v "$RunningKernel")"

if [ "$(echo "$RunningKernel" | grep "686")" != "" ]; then
 ToRemove="\-686\-pae"
else
 ToRemove="\-amd64"
fi

CurrentKernel=$(echo "$RunningKernel" | sed -e "s|$ToRemove||g" | sed -e "s|\-||g" | sed -e "s|\.||g")


for i in $KernelList; do
Kernel="$i"
QKernel=$(echo $i | sed -e "s|$ToRemove||g" | sed -e "s|\-||g" | sed -e "s|\.||g")
echo $QKernel
echo $CurrentKernel
if (($CurrentKernel > $QKernel)); then
 echo "$Kernel">>/tmp/Clean-Kernel-List
 KernelFindSize="$KernelFindSize /lib/modules/$Kernel"
fi

done

## Calculate Size, a very rough estimate

if [ "$KernelFindSize" != "" ]; then
 for i in $KernelFindSize; do
  KernelSize="$(du -chs --apparent-size "$i" | grep "total" | awk '{print $1}' | awk -F 'M' '{print $1}')"
 if [ "$(echo $KernelSize | grep '.')" != "" ]; then
  KernelSize=$(echo $KernelSize | awk -F '.' '{print $1}')
 fi
  if [ "$KernelSizes" = "" ]; then
   KernelSizes="$KernelSize"
  else
   KernelSizes=$(($KernelSizes + $KernelSize))
  fi
done
KernelSizes="$KernelSizes"M
else
 KernelSizes="0"
fi

## Dirty but effective hax
if [ "$PackageCacheSize" = "8.0K" ]; then
 PackageCacheSize="0"
fi

if [ "$ThumbnailsSize" = "4.0K" ]; then
 ThumbnailsSize="0"
fi

if [ "FlashCookieSize" = "8.0K" ]; then
 FlashCookieSize="0"
fi

sleep 3

killall -KILL tail

MainMenu () {

Operation=$(yad $Icon --button=$"gtk-info:5" --button=$"gtk-quit:3" --button=$"gtk-ok:2" --list --text="Please select the actions you wish to perform" --height="250" --checklist --multiple --on-top --column=' ' --column="Action" --column="Size" --title="Clean" --print-column="2" X Flash-Cookies "$FlashCookieSize" X Logs "$LogsSize" X Package-Cache "$PackageCacheSize" X Un-Needed-Packages "$FinalSize"M X Thumbnails "$ThumbnailsSize" X Old-Kernels "$KernelSizes")

ret=$?

Operation=$(echo "$Operation" | sed -e "s/|//g")

if [ "$ret" = "252" ]; then
 rm -rf Clean-Kernel-List
 rm -rf Clean-Logs
 exit 0
elif [ "$ret" = "3" ]; then
 rm -rf Clean-Kernel-List
 rm -rf Clean-Logs
 exit 0
elif [ "$ret" = "5" ]; then
 yad --title="Clean $CLEANINFO" $Icon --width="325" --wrap --button=$"gtk-ok:1" --text="$CLEANTEXT"
MainMenu
exit 0
fi


if [ "$(echo "$Operation" | grep Flash-Cookies)" != "" ]; then
 rm -rf $HOME/.adobe
 rm -rf $HOME/.macromedia/Flash_Player
 mkdir -p $HOME/.adobe
 mkdir -p $HOME/.macromedia/Flash_Player
fi

if [ "$(echo "$Operation" | grep Package-Cache)" != "" ]; then
 CacheCode=( "apt-get clean" )
 UseSudo="Yes"
else
 CacheCode=( "" )
fi

if [ "$(echo "$Operation" | grep Logs)" != "" ]; then
 rm $HOME/.xsession-errors
 touch $HOME/.xsession-errors
 LogsCode=( "for i in \$(cat /tmp/Clean-Logs); do
 rm -rf /var/log/\$i
done" )
 UseSudo="Yes"
 else
 LogsCode=( "" )
fi

if [ "$(echo "$Operation" | grep Thumbnails)" != "" ]; then
 rm -rf $HOME/.thumbnails
 mkdir -p $HOME/.thumbnails
fi
if [ "$(echo "$Operation" | grep Packages)" != "" ]; then
 DialogText=$(apt-get -y -s autoremove | grep '  ' | grep -v "This is only a simulation" | grep -v "root privileges for real" | grep -v "Keep also in mind that locking" | grep -v "depend on the relevance to the real")
 yad $Icon --width="275" --on-top --wrap --center --title="Clean" --image=gtk-dialog-question --text="The following packages will be removed:\n\n$DialogText" --button=$"gtk-no:1" --button=$"gtk-yes:3"

 if [ "$?" = "3" ]; then
  PackagesCode=( "apt-get -y autoremove" )
  UseSudo="Yes"
 else
  PackagesCode=( "" )
 fi

fi

if [ "$(echo "$Operation" | grep Old-Kernels)" != "" ]; then
if [ "$KernelSizes" != "0" ]; then
 KernelCode=( "for i in \$(cat /tmp/Clean-Kernel-List); do
apt-get -y remove linux-image-\$i --purge
done" )
UseSudo="Yes"
else
 KernelCode=( "" )
fi
fi

if [ "$UseSudo" != "" ]; then

cat > /tmp/Clean-SalineOS <<FOO
#!/bin/bash

PidOfUsing=\$(fuser -a /var/lib/dpkg/lock)
NameOfUsing=\$(ps -p \$PidOfUsing -o comm=)

if [ "\$PidOfUsing" != "" ]; then
 yad --title="Clean" $Icon --wrap --width="275" --text="Application \$NameOfUsing with process ID\$PidOfUsing has an exclusive lock on the apt directory. Please allow this application to finish and close it before trying this operation again" --button=$"gtk-quit:3"

exit 0
fi

${KernelCode[@]}

${PackagesCode[@]}

${LogsCode[@]}

${CacheCode[@]}

FOO

cat /tmp/Clean-SalineOS

chmod +x /tmp/Clean-SalineOS
gksudo /tmp/Clean-SalineOS


fi

if [ "$Operation" != "" ]; then
notify-send -u normal -i /usr/share/pixmaps/clean.png -t 15000 "
$CLEANCOMPLETE"
fi


rm -rf /tmp/Clean-Logs
rm -rf /tmp/Clean-SalineOS
rm -rf /tmp/Clean-Kernel-List

exit 

}

MainMenu
exit 0
