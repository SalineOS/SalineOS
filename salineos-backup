#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
#  Copyright 2008,2009,2010,2012 Under the GNU GPL2 License
# Authors Tony Brijeski, Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 


## Set options for yet another dialog, this makes creating dialogs much easier.

Info='yad --center --title=SalineOS-Backup --window-icon=/usr/share/pixmaps/salineos-installer.png'

Question='yad  --wrap --center --image=gtk-dialog-question --button=gtk-no:1 --button=gtk-yes:0 --title=SalineOS-Backup --window-icon=/usr/share/pixmaps/salineos-installer.png'

SingleMenu='yad  --center --list --column=Choices --title=SalineOS-Backup --window-icon=/usr/share/icons/pixmaps/salineos-installer.png'

Menu='yad --print-column=1 --center --list --title=SalineOS-Backup --window-icon=/usr/share/pixmaps/salineos-installer.png'

Progress='yad --center --progress --auto-close --title=SalineOS-Backup --no-buttons --window-icon=/usr/share/pixmaps/salineos-installer.png'

TextEntry='yad --center --entry --title=SalineOS-Backup --window-icon=/usr/share/pixmaps/salineos-installer.png'


StartBackup () {


SaveFolder=$(yad --file-selection --title="SalineOS-Backup" --height=450 --width=600 --directory --text="\n                     Select the folder to save the backup image to\n" --button=$"gtk-quit:3" --button=$"gtk-ok:2")

ret="$?"

if [ "$ret" = "252" ]; then
 StartBackup
 exit 0
elif [ "$ret" = "3" ]; then
 exit 0
elif [ "$SaveFolder" = "" ]; then
 StartBackup
 exit 0
fi

ImageName=$($TextEntry --wrap --width=250 --text="Enter a name for the backup file, or select time to use the current time and date." --button=$"gtk-quit:3" --button=$"Time:5" --button=$"gtk-ok:2")

ret="$?"

if [ "$ret" = "252" ]; then
 exit 0
elif [ "$ret" = "3" ]; then
 exit 0
elif [ "$ret" = "5" ]; then
 ImageName=$(date +%H%M%h%d%Y)
elif [ "$ImageName" = "" ]; then
 ImageName=$(date +%H%M%h%d%Y)
fi

if [ "$BackupPart" = "root" ]; then
 $Info --text="Please close all other running applications before continuing" --button=$"gtk-ok:1"
 UseRoot='/'
else
 umount "$BackupPart"
 sleep 2 
 mkdir -p /mnt/Super-Happy-Mount-Point
 mount "$BackupPart" /mnt/Super-Happy-Mount-Point -o rw
 if [ "$HomePart" != "" ]; then
  mount "$HomePart" /mnt/Super-Happy-Mount-Point/home -o rw
 fi
 UseRoot="/mnt/Super-Happy-Mount-Point"
fi


mksquashfs $UseRoot $SaveFolder/$ImageName.backup -always-use-fragments -b 1M -no-duplicates -no-recovery  -e \
.bash_history \
.cache \
.thumbnails \
boot/grub \
Cache \
dev \
media \
mnt \
proc \
$SaveFolder/$ImageName.backup \
swap \
sys \
tmp \
var/log \
var/run \ >> /tmp/salineos-backup-temp-file &

(while [ "$(pidof mksquashfs)" != "" ]; do
CurrentOutput="$(tail --lines=1 /tmp/salineos-backup-temp-file)"
echo "$CurrentOutput" | awk -F ' ' '{print $NF+0}' 
done)| $Progress --text="Creating backup $ImageName.backup, Please wait..."

## Unmount partitions if needed
if [ "$HomePart" != "" ]; then
 umount "$HomePart" 
fi

if [ "$BackupPart" != "root" ]; then 
 umount "$BackupPart"
fi

## Cleanup some
if [ -d /mnt/Super-Happy-Mount-Point ]; then
 rm -rf /mnt/Super-Happy-Mount-Point
fi


rm /tmp/salineos-backup-temp-file

$Info --text="Creation of backup image $SaveFolder/$ImageName complete" --button=$"gtk-quit:1"

exit 0

}

SelectBackupHomePart () {


PartMenu=""

Partitions=$(cat /proc/partitions | awk '{print $4}' | grep "[0-9]" | grep -v 'p1' | grep -v "$BackupPart")

TempParts="$(echo $Partitions)"

for i in $Partitions; do
TempSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
if [ "$TempSize" = "1" ]; then
 TempParts=$(echo $TempParts | sed -r "s/$i//")
fi
done


for i in $TempParts; do
  Part="$i"
  PartSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
  PartMenu="$PartMenu $Part $PartSize"
done


HomePart=$($Menu --height=300 --width=300 --wrap --column="Partition Name" --column="Size In Megabytes" --button=$"gtk-quit:3" --button=$"Use Selected:2" --text="Please select the root partition you want to backup." $PartMenu )

ret=$?


if [ "$ret" = "252" ]; then
 SelectBackupHomePart
 exit 0
elif [ "$ret" = "3" ]; then
 exit 0
elif [ "$HomePart" = "" ]; then
 SelectBackupHomePart
 exit 0
fi

HomePart=$(echo "$HomePart" | awk -F '|' '{print $1}')
HomePart="/dev/$HomePart"

StartBackup


}

SelectBackupPart () { 

PartMenu=""

Partitions=$(cat /proc/partitions | awk '{print $4}' | grep "[0-9]" | grep -v 'p1')

TempParts="$(echo $Partitions)"

for i in $Partitions; do
TempSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
if [ "$TempSize" = "1" ]; then
 TempParts=$(echo $TempParts | sed -r "s/$i//")
fi
done


for i in $TempParts; do
  Part="$i"
  PartSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
  PartMenu="$PartMenu $Part $PartSize"
done


BackupPart=$($Menu --height=300 --width=300 --wrap --column="Partition Name" --column="Size In Megabytes" --button=$"gtk-quit:3" --button=$"Use Selected:2" --text="Please select the root partition you want to backup." $PartMenu )

ret=$?


if [ "$ret" = "252" ]; then
 SelectBackupPart
 exit 0
elif [ "$ret" = "3" ]; then
 exit 0
elif [ "$BackupPart" = "" ]; then
 SelectBackupPart
 exit 0
fi

BackupPart=$(echo "$BackupPart" | awk -F '|' '{print $1}')
BackupPart="/dev/$BackupPart"

$Question --text="Is /home for this instance on a seperate partition?" 

if [ "$?" = "0" ]; then
 SelectBackupHomePart
else
 StartBackup
fi

}


SelectBackupImage () {

BackupImage=""

BackupImage=$(yad --file-selection --title="SalineOS-Backup" --height=450 --width=600 --text="\n                     Select the backup image you wish to restore\n" --button=$"gtk-quit:3" --button=$"gtk-ok:2")

ret="$?"

BackupImage=$(echo $BackupImage | awk -F '|' '{print $1}')

if [ "$ret" = "252" ]; then
 SelectBackupImage
 exit 0
elif [ "$ret" = "3" ]; then
 $Question --text="Are you sure you want to cancel the resoration?"
 if [ "$?" = "0" ]; then
  if [ -f /tmp/Finished-Menu ]; then
   rm /tmp/Finished-Menu
  fi
  exit 1
elif [ "$BackupImage" = "" ]; then
 SelectBackupImage
 exit 0
elif [ "$(echo "$BackupImage" | grep ".backup")"  = "" ]; then
 $Info --button=$"gtk-ok:1" --text="$BackupImage is not a valid backup image"
 SelectBackupImage
 exit 0
fi

AutoPartitioning

}

MainMenu () {

Operation=$($SingleMenu --wrap --height=300 --width=400 --text="Please select the operation you wish to perform" "Create a backup image of this SalineOS instance" "Create a backup image of another Linux instance" "Restore a backup image" --button=$"gtk-quit:3" --button=$"gtk-ok:2")

ret="$?"

Operation=$(echo "$Operation" | awk -F '|' '{print $1}')

if [ "$ret" = "3" ]; then
 exit 0
elif [ "$ret" = "252" ]; then
 MainMenu
 exit 0
elif [ "$Operation" = "" ]; then
 $Info --text="You must select an operation in order to continue" --button=$"gtk-ok:1"
 MainMenu
 exit 0
elif [ "$Operation" = "Create a backup image of this SalineOS instance" ]; then
 BackupPart="root"
 StartBackup
 exit 0
elif [ "$Operation" = "Create a backup image of another Linux instance" ]; then
 SelectBackupPart
 exit 0
elif [ "$Operation" = "Restore a backup image" ]; then
 SelectBackupImage
 exit 0
fi

}


## Choose the drive to partition

ChooseDrive () { 

GrubMenu=""
PartDriveMenu=""
PartDrive=""

Drives=$(cat /proc/partitions | grep -v loop | grep -v major | grep -v "^$" | awk '{print $4}' | grep -v "[0-9]")

for i in $Drives; do
  PartDrive="$i"
  PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
  PartDriveMenu="$PartDriveMenu $PartDrive $PartDriveSize"
  GrubMenu="$PartDrive Master-Boot-Record $GrubMenu"
done


if [ "$AutoPart" = "Auto" ]; then
PartDrive=$($Menu --width=300 --height=300 --column="Drive" --column="Size In Megabytes" --text="Please select a drive to erase and use.\n"  --button=$"gtk-quit:3" --button=$"gtk-ok:2" $PartDriveMenu )
else
PartDrive=$($Menu --width=300 --height=300 --column="Drive" --column="Size In Megabytes" --text="Please select a drive to partition.\n"  --button=$"gtk-quit:3" --button=$"gtk-ok:2" $PartDriveMenu )
fi

ret=$?



if [ "$ret" = "3" ]; then
  $Question --text="Are you sure you want to cancel the resoration?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   ChooseDrive
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 ChooseDrive
 exit 0
elif [ "$PartDrive" = "" ]; then
 ChooseDrive
 exit 0
fi 


PartDrive=$(echo "$PartDrive" | awk -F '|' '{print $1}')

## Since unlike the salineos-installer this utility can be run from a non live envoirnment
## We need to make sure that the user doesn't try to autopartition the currently used disk.
RootDir="$(mount | grep -B 0 ' / ')"

if [ "$AutoPart" = "Auto" ]; then
 if [ "$(echo "$RootDir" | grep "$PartDrive")" != "" ]; then
  $Info --wrap --width=300 --text="You cannot erase the partition this utility is running from, please select another disk or use manual partitioning to select another partition on this disk.\n"
  AutoPartitioning
 fi
fi
  

## Launch GParted
if [ "$AutoPart" != "Auto" ]; then
 gparted /dev/$PartDrive
fi

if [ "$AutoPart" = "Auto" ]; then
 SwapFile
 exit 0
else
 SelectRootPart
 exit 0
fi

}




## Ask the user if they wish to use automatic partitioning.

AutoPartitioning () {
$Info --width=400 --wrap --text="You will need at least one partition in order to restore your backup image.\n\nThe installer can erase all data on a hard drive, USB flash drive, or solid state disk of your choice and create this partition for you automatically, or you can manually partition your storage media using GParted.\n\nManual partitioning will allow you to preserve other operating systems and information on your hard disk." --button=$"Partition disk manually:3" --button=$"Erase and use an entire disk:5"

ret=$?

if [ "$ret" = "252" ]; then
 AutoPartitioning 
 exit 0
elif [ "$ret" = "5" ]; then
 AutoPart="Auto"
 ChooseDrive
 exit 0
elif [ "$ret" = "3" ]; then
 AutoPart="Manual"
 ChooseDrive
 exit 0
fi 

}

## Check for root and cry like a little girl if we don't have it.

TestRoot="$(whoami)"

if [ "$TestRoot" != "root" ]; then
 $Info --button=$"gtk-quit:1" --text="SalineOS Backup must be run as root."
 exit 1
fi

if [ "$1" = "Restore" ]; then
 BackupImage="$2"
 AutoPartitioning
else
 MainMenu
fi


