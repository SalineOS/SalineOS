#!/bin/bash
# Licensed under the GNU General Public License Version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
####################################################################################################
# Copyright 2012 Anthony Nordquist http://www.salineos.com salinelinux@gmail.com 
# Some code borrowed from the Remastersys Installer by Tony Brijeski 
#
#
################### Remastersys-installer original copyright notice ##########################
#  remastersys-installer is an alternative installer for remastered livecd/dvd's
#
#
#  Created by Tony "Fragadelic" Brijeski
#
#  Copyright 2008,2009,2010 Under the GNU GPL2 License
#
#  Originally Created September 12th,2008
#
################### End Original copyright notice ###########################################


## Set options for yet another dialog, this makes creating dialogs much easier.

Info='yad --center --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'

Question='yad  --wrap --center --image=gtk-dialog-question --button=gtk-no:1 --button=gtk-yes:0 --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'

SingleMenu='yad  --center --list --column="Please choose one." --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'

Menu='yad --print-column=1 --center --list --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'

Progress='yad --center --progress --auto-close --title=SalineOS-Installer --no-buttons --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'

TextEntry='yad --center --entry --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png'


## Check for root and cry like a little girl if we don't have it.

TestRoot="$(whoami)"

if [ "$TestRoot" != "root" ]; then
 $Info --button=$"gtk-ok:1" --text="Must be run as root - press ok to exit"
 exit 1
fi


## Get variables from the live system configuration. 
. /etc/live/config.conf


## This installer only takes one option, ext3 this variable is testing for it.
Input="$@"

RunInstallation () { 

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="Preparing disk and partitions               " &

## Check for safe mode and change the grub line.
TestSafeMode=$(grep -B 0  "noapic noapm nodma nomce nolapic nomodeset radeon.modeset=0 nouveau.modeset=0" /proc/cmdline)

if [ "$TestSafeMode" != "" ]; then
 OldGrubLine="$(grep -B 0  "GRUB_CMDLINE_LINUX=" /etc/default/grub)"
 sed -i -e "s/"$OldGrubLine"""/GRUB_CMDLINE_LINUX=\"noapic noapm nodma nomce nolapic nomodeset radeon.modeset=0 nouveau.modeset=0 nosmp\"/g" /etc/default/grub
fi

if [ "$Input" = "ext3" ]; then
 FilesystemType="ext3"
else
 FilesystemType="ext4"
fi

if [ "$AutoPart" = "Auto" ]; then 
 parted --script --align optimal /dev/$PartDrive mklabel msdos
 parted --script --align optimal /dev/$PartDrive mkpart primary 1 -- -1
 parted --script --align optimal /dev/$PartDrive set 1 boot on
 TargetHomePart="root"
 TargetPart="$PartDrive"1
fi

if [ "$(mount | grep $TargetPart)" != "" ]; then
 umount /dev/$TargetPart
 sleep 3
fi

mke2fs -t $FilesystemType /dev/$TargetPart

mkdir -p /Target

sleep 3

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="                   Mounting $TargetPart                   " &

mount /dev/$TargetPart /Target -o rw

sleep 3

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="Configure the filesystem to be checked\nevery 35 mounts" &

tune2fs -c 35 -i 0 /dev/$TargetPart

sleep 3

rm -rf /Target/lost+found

killall -KILL tail

if [ "$TargetHomePart" != "root" ]; then
 if [ "$FormatHome" = "True" ]; then
  tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="           Formatting $TargetHomePart for /home           " &
  umount /dev/$TargetHomePart
  sleep 2
  mke2fs -t $FilesystemType /dev/$TargetHomePart
  sleep 3
  killall -KILL tail
 fi

 tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="              Mounting $TargetHomePart              " &

 mkdir -p /Target/home

 mount /dev/$TargetHomePart /Target/home -o rw

 tune2fs -c 35 -i 0 /dev/$TargetHomePart

 rm -rf /Target/home/lost+found

 TargetHomeUUID=$(blkid /dev/$TargetHomePart | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')

 ## Get fs type for the home partition in case the user chose not to format it
 HomeFilesystemType=$(mount | grep "/dev/$TargetHomePart" | awk '{print $5}' | awk -F ' ' '{print $1}')

 killall -KILL tail
fi

tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="               Generating UUID values for fstab               " &

TargetPartUUID=$(blkid /dev/$TargetPart | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')
TargetCDRom="/dev/cdrom"

sleep 3

killall -KILL tail

## Copy the live system to $Target
tail -f /usr/bin/salineos-installer | $Progress --text="                   Copying files to $TargetPart                   " --pulsate &

rsync -a / /Target --ignore-existing --exclude=/{Target,live,cdrom,mnt,proc,sys,media}

## Make needed aditional folders on the system.
mkdir -p /Target/{proc,mnt,sys,media/cdrom}

sleep 3

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="                    Setting up swap space                    " --pulsate &


if [ "$UseSwapFile" = "True" ]; then
 mkdir -p /Target/swap
 fallocate --l "$SwapFileSize"m /Target/swap/salineos-swap
 sleep 2
 mkswap /Target/swap/salineos-swap
 SwapFstab="/swap/salineos-swap"
else
 mkswap $Swap
 sleep 2
 blkid
 sleep 2
 TargetSwapUUID=$(blkid /dev/$Swap | awk -F 'UUID="' '{print $2}' | awk -F '"' '{print $1}')
 SwapFstab="UUID=$TargetSwapUUID"
fi

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="Changing configuration files on installed system" --pulsate &

## Prepare a chroot envoirnment for post install changes

mount -o bind /proc /Target/proc
mount -o bind /dev /Target/dev
mount -o bind /sys /Target/sys
rm -rf /Target/etc/fstab

## Create a new fstab file for the system


if [ "$TargetHomePart" = "root" ]; then
cat > /Target/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

proc /proc proc defaults 0 0
# Root was on /dev/$TargetPart during install
UUID=$TargetPartUUID / $FilesystemType relatime,errors=remount-ro 0 1
# Swap space created during install
$SwapFstab none swap sw 0 0
# cdrom
$TargetCDRom /media/cdrom udf,iso9660 user,noauto,exec,utf8 0 0


FOO

else

cat > /Target/etc/fstab <<FOO
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

proc /proc proc defaults 0 0
# Root was on /dev/$TargetPart during install
UUID=$TargetPartUUID / $FilesystemType relatime,errors=remount-ro 0 1
# /dev/$TargetHomePart home
UUID=$TargetHomeUUID /home $HomeFilesystemType relatime 0 0
# Swap space created during install
$SwapFstab none swap sw 0 0
# cdrom
$TargetCDRom /media/cdrom udf,iso9660 user,noauto,exec,utf8 0 0


FOO

fi

## Remove diverted update-initramfs as live-initramfs makes it a dummy file when booting the livecd
if [ -f /Target/usr/sbin/update-initramfs.debian ]; then
 rm -f /Target/usr/sbin/update-initramfs
fi

## Remove diverted update-notifier as it is disabled by live-config
if [ -f /Target/usr/lib/update-notifier/apt-check.debian ]; then
 rm -f /Target/usr/lib/update-notifier/apt-check
fi

## Remove diverted anacron as it is disabled by live-config
if [ -f /Target/usr/sbin/anacron.debian ]; then
 rm -f /Target/usr/sbin/anacron
fi

## Restore original inittab as live-initramfs changes it
cp /Target/usr/share/sysvinit/inittab /Target/etc/inittab

rm /Target/etc/hostname
rm /Target/etc/hosts

echo "$TargetHostname" > /Target/etc/hostname
echo "127.0.0.1 localhost" > /Target/etc/hosts
echo "127.0.0.1 $TargetHostname" >> /Target/etc/hosts
touch /Target/etc/resolv.conf

sleep 2

killall -KILL tail

tail -f /usr/bin/salineos-installer | $Progress --text="             Setting up user account             " --pulsate &

DefaultGroups="audio,cdrom,dialout,floppy,video,plugdev,netdev,powerdev,lp,scanner,disk,fuse,games,voice,sudo"

cat > /Target/usr/bin/TempScript <<FOO
#!/bin/bash

userdel -f -r $LIVE_USERNAME
sed -i '/$LIVE_USERNAME/d' /etc/sudoers
groupadd -g 1000 $TargetUser
useradd -u 1000 -g 1000 -c "$TargetUserRealName,,," -G $DefaultGroups -s /bin/bash -m $TargetUser
echo -e "$TargetUserPassword2\n$TargetUserPassword2\n" | passwd $TargetUser
dpkg-divert --remove --rename --quiet /usr/lib/update-notifier/apt-check
dpkg-divert --remove --rename --quiet /usr/sbin/update-initramfs
dpkg-divert --remove --rename --quiet /usr/sbin/anacron
update-initramfs -t -c -k $(/bin/uname -r)
shadowconfig on

FOO

chmod 755 /Target/usr/bin/TempScript

sleep 1

chroot /Target /usr/bin/TempScript

sleep 2

rm /Target/usr/bin/TempScript
sleep 3

killall -KILL tail


## Install GRUB2
tail -f /usr/bin/salineos-installer | $Progress --text="Installing and configuring GRUB2                  " --pulsate &
chroot /Target chmod -x /etc/grub.d/20_memtest86+
chroot /Target grub-install --force --no-floppy "$GrubLocation"
sleep 2
chroot /Target update-grub
sleep 2

## Remove Installer icon
chroot /Target rm "/home/$TargetUser./SalineOS Installer.desktop"

killall -KILL tail

## Unmount the target partition  
tail -f /usr/bin/salineos-installer | $Progress --text="                  Unmounting $TargetPart                  " --pulsate &

sleep 2
umount /Target/home
sleep 2
umount /Target/proc
sleep 2
umount /Target/dev
sleep 2
umount /Target/sys
sleep 2
umount /Target
sleep 2

killall -KILL tail

$Question --text="\nInstallation is complete.\n\nIf everything went well you should have your\nnew system installed and ready.\n\nDo you want to reboot now to try it out?" 

if [ $? = 0 ]; then
 reboot
else
 exit 0
fi

}


FinishedMenu () {

Change=""

if [ "$AutoPart" = "Manual" ]; then
 if [ "$UseSwapFile" = "True" ]; then
  SwapFinished='Swap-File'
  SwapFinished2="A $SwapFileSize Megabytes swap file will be created"
 else
  SwapFinished='Swap-Partition'
  SwapFinished2="$Swap will be used as the swap partition"
 fi

RootPartition="Root-Partition"

 if [ "$Input" = "ext3" ]; then
  RootPartition2="$TargetPart will be formatted (erased) ext3 and used for root"
 else
  RootPartition2="$TargetPart will be formatted (erased) ext4 and used for root"
 fi

HomePartFinished="Home"

 if [ "$TargetHomePart" = "root" ]; then
  HomePartFinished2="The home folder will be placed on the root partition"
 else
  if [ "$FormatHome" = "True" ]; then
   if [ "$Input" = "ext3" ]; then
    HomePartFinished2="$TargetHomePart will be formated (erased) ext3 and used for /home"
   else
    HomePartFinished2="$TargetHomePart will be formated (erased) ext4 and used for /home"
   fi
  else
   HomePartFinished2="$TargetHomePart will be used for /home without erasing data"
  fi
 fi
else
 SwapFinished='Swap-File'
 SwapFinished2="A $SwapFileSize Megabytes swap file will be created"
 RootPartition="Use-Disk"
 RootPartition2="$PartDrive will be erased and the entire disk used"
fi

if [ "$Internet" != "Continue" ]; then
if [ "$InstallCodec" = "FALSE" ]; then
 CodecsFinished="Install-Plugins"
 CodecsFinished2="Restricted multimedia plug-ins will not be installed"
else
 CodecsFinished="Install-Plugins"
 CodecsFinished2="Restricted multimedia plug-ins will be installed"
fi
fi

UserFinished="User-Account"
UserFinished2="A user account will be created for "$TargetUserRealName" with the username "$TargetUser""

AutoLoginFinished="Auto-Login"
AutoLoginFinished2="Require password for login is "$RequirePassword""

HostnameFinished="Hostname"
HostnameFinished2="The system hostname will be set to "$TargetHostname""

TimeZoneFinished="Time-Zone"
TimeZoneFinished2="The system time zone will be set to "$TimeZone""

GrubFinished="Boot-Loader"
GrubFinished2="The GRUB2 boot loader will be installed to "$GrubLoc""

if [ "$AutoPart" = "Auto" ]; then
Change=$($Menu --height=400 --column="Option" --column="Current Status" --text="Please review the settings you have chosen carefully, you may go back and change any \nof these settings now.\n" --button=$"Exit:3" --button=$"Change Selected:2" --button=$"Run Installation:5" "$CodecsFinished" "$CodecsFinished2" "$RootPartition" "$RootPartition2" "$SwapFinished" "$SwapFinished2" "$UserFinished" "$UserFinished2" "$AutoLoginFinished" "$AutoLoginFinished2" "$HostnameFinished" "$HostnameFinished2" "$TimeZoneFinished" "$TimeZoneFinished2" "$GrubFinished" "$GrubFinished2")
else
Change=$($Menu --height=400 --column="Option" --column="Current Status" --text="Please review the settings you have chosen carefully, you may go back and change any \nof these settings now.\n" --button=$"Exit:3" --button=$"Change Selected:2" --button=$"Run Installation:5" "$CodecsFinished" "$CodecsFinished2" "$RootPartition" "$RootPartition2" "$SwapFinished" "$SwapFinished2" "$HomePartFinished" "$HomePartFinished2" "$UserFinished" "$UserFinished2" "$AutoLoginFinished" "$AutoLoginFinished2" "$HostnameFinished" "$HostnameFinished2" "$TimeZoneFinished" "$TimeZoneFinished2" "$GrubFinished" "$GrubFinished2")
fi

ret="$?"

Change=$(echo "$Change" | awk -F '|' '{print $1}')
 
if [ "$ret" = "252" ]; then
 FinishedMenu
 exit 0 
elif [ "$ret" = "3" ]; then 
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   FinishedMenu
   exit 0
  fi
elif [ "$ret" = "5" ]; then
 rm -rf /tmp/Finished-Menu
 RunInstallation
 exit 0
elif [ "$Change" = "Swap-Partition" ]; then
 SelectSwapPart
 exit 0
elif [ "$Change" = "Root-Partition" ]; then
 SelectRootPart
 exit 0
elif [ "$Change" = "Swap-File" ]; then
 SwapFile
 exit 0
elif [ "$Change" = "Home" ]; then
 SelectHomePart
 exit 0
elif [ "$Change" = "Auto-Login" ]; then
  $Question --text="Require a password to login as "$TargetUser"?"
  if [ "$?" = "0" ]; then
   RequirePassword="TRUE"
   FinishedMenu 
   exit 0
  else
   RequirePassword="FALSE"
   FinishedMenu
   exit 0
  fi
elif [ "$Change" = "User-Account" ]; then
 UserSetup
 exit 0
elif [ "$Change" = "Hostname" ]; then
 SetHostname
 exit 0
elif [ "$Change" = "Time-Zone" ]; then
 SetTimeZone
 exit 0
elif [ "$Change" = "Boot-Loader" ]; then
 GrubSelect
 exit 0
elif [ "$Change" = "Use-Disk" ]; then
 ChooseDrive
 exit 0
elif [ "$Change" = "" ]; then
 $Info --text="No change selected" --button=$"gtk-ok:1"
 FinishedMenu
 exit 0
fi


rm -rf /tmp/Finished-Menu


}


GrubSelect () {

## Grub location

GrubLocation=""
GrubLoc=""

GrubLoc=$($Menu --width=300 --height=250 --column='Location' --column=' ' --button=$"Exit:3" --button=$"OK:2" --text="Please select where to install the grub boot loader\n" $GrubMenu root "Root partition - (Advanced)")

ret="$?"

if [ "$ret" = "252" ]; then
 GrubSelect
 exit 0 
elif [ "$ret" = "3" ]; then 
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   GrubSelect
   exit 0
  fi
elif [ "$GrubLoc" = "" ]; then
 $Info --text="The grub location cannot be blank, please choose where to install grub." --button=$"gtk-ok:1"
 GrubSelect
 exit 0
fi

GrubLoc=$(echo "$GrubLoc" | awk -F '|' '{print $1}')

if [ "$GrubLoc" != "root" ]; then
 GrubLocation="/dev/$GrubLoc"
else
 GrubLocation="/dev/$TargetPart"
fi

touch /tmp/Finished-Menu

FinishedMenu

}


SetTimeZone () {

TimeZones=""

cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sort > /tmp/SalineOS-TimeZones
for i in $(cat /tmp/SalineOS-TimeZones); do
 TimeZones="$TimeZones $i"
done
rm /tmp/SalineOS-TimeZones

TimeZone=$(yad --on-top --width=300 --height=450 --center --list --column="Select your time zone:" --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png --button=$"gtk-ok:2" $TimeZones)

ret="$?"



if [ "$ret" = "252" ]; then
 SetTimeZone
 exit 0 
elif [ "$TimeZone" = "" ]; then
 $Info --text="The time zone cannot be blank, please select your time zone." --button=$"gtk-ok:1"
 SetTimeZone
 exit 0
fi

TimeZone="$(echo $TimeZone | awk -F '|' '{print $1}')"

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 GrubSelect
 exit 0
fi

}


SetHostname () {


TargetHostname=""

TargetHostname=$($TextEntry --text="Enter a hostname for the installed system. You can enter anything\nyou like here, except spaces and special characters" --button=$"About Hostname:3" --button=$"OK:2")


ret="$?"

if [ "$ret" = "252" ]; then
 SetHostname
 exit 0
elif [ "$ret" = "3" ]; then
 $Info --text="The system\'s hostname is used to identify the machine on a network,\nsuch as a local area network or the internet.\n\nFor PCs the hostname is used mostly for easing administration of devices\non LAN, such as switches, routers, and wireless access points." --button=$"gtk-ok:1"
 SetHostname
 exit 0
elif [ "$TargetHostname" = "" ]; then
 $Info --text="The hostname cannot be blank." --width=200 --button=$"gtk-ok:1"
 SetHostname
 exit 0
fi


## Check if the user is an idiot :)
TestHostname=$(echo "$TargetHostname" | grep '[!@#$%&*()_+=~,.?:;*-+]')

if [ "$TestHostname" != "" ]; then
 $Info --text="The hostname cannot contain special characters." --width=200 --button=$"gtk-ok:1"
 SetHostname
 exit 0
fi

## Remove spaces just in case the user doesn't read >.>
TargetHostname="$(echo "$TargetHostname" | sed -e 's| ||g')"


if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SetTimeZone
 exit 0
fi


}

UserSetup () {

if [ -f /etc/salineos-utils/BACKUP ]; then
 GrubSelect
 exit 0
fi

## Reset all variables just in case

UserStuff=""
TargetUserRealName=""
TargetUser=""
TargetUserPassword1=""
TargetUserPassword2=""
RequirePassword=""
UserStuff=$(yad --center --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png --form --text="Complete this form to setup an initial user.\nThis user\'s password will be required for administrative tasks." --field="User's Real Name:" --field="Username:" --field="Password::H" --field="Re-enter Password::H" --field="Require The user's password to logon?:CHK" --button=$"Exit:3" --button=$"OK:2")

ret=$?

if [ "$ret" = "3" ]; then
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   UserSetup
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 UserSetup
 exit 0
fi

TargetUserRealName="$(echo "$UserStuff" | awk -F '|' '{print $1}')"
TargetUser="$(echo "$UserStuff" | awk -F '|' '{print $2}')"
## Change capital letters in username to lowercase
TargetUser="$(echo "$TargetUser" | awk '{print tolower ($0)}')"
TargetUserPassword1="$(echo "$UserStuff" | awk -F '|' '{print $3}')"
TargetUserPassword2="$(echo "$UserStuff" | awk -F '|' '{print $4}')"
RequirePassword="$(echo "$UserStuff" | awk -F '|' '{print $5}')"


if [ "$TargetUserRealName" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="User\'s real name field cannot be left blank, please try again."
 UserSetup
 exit 0
elif [ "$TargetUser" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="Username cannot be left blank, please try again."
 UserSetup
 exit 0
elif [ "$TargetUserPassword1" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="User\'s Password cannot be blank, please try again."
 UserSetup
 exit 0
elif [ "$TargetUserPassword2" = "" ]; then
 $Info --button=$"gtk-ok:1" --text="User\'s Password cannot be blank, please try again."
 UserSetup
 exit 0
elif [ "$TargetUserPassword1" != "$TargetUserPassword2" ]; then
 $Info --button=$"gtk-ok:1" --text="Passwords do not match, please try again."
 UserSetup
 exit 0
fi

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SetHostname
 exit 0
fi


}

SelectHomePart () {

HomePartMenu=""

ExtraParts="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v "Extended" | grep -v "$TargetPart" | grep -v "swap" | grep -v 'p1' | grep -v "extended" | grep -v "Hidden" | cut -d " " -f1)"

## Cleanup the fdisk output
HomeParts=$(echo "$ExtraParts" | sed -r "s/\/dev\///g")

for i in $HomeParts; do
 HomePart="$i"
 HomePartSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
 HomePartMenu="$HomePartMenu $HomePart $HomePartSize"
done

HomePart=$($Menu --text="  Select a seperate partition for /home (User files) if desired\n" --height=400 --column=Partition --column="Size in Megabytes" --button=$"Exit:3" --button=$"Use Selected:2" --button=$"Put /home on the root partition:5" $HomePartMenu)

ret=$?

if [ "$ret" = "252" ]; then
 SelectHomePart
 exit 0
elif [ "$ret" = "3" ]; then
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectSwapPart
   exit 0
  fi
elif [ "$ret" = "5" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  TargetHomePart="root"
  FinishedMenu
  exit 0
 fi
 TargetHomePart="root"
 UserSetup
 exit 0
elif [ "$HomePart" = "" ]; then
 SelectHomePart
 exit 0
else
 TargetHomePart=$(echo "$HomePart" | awk -F '|' '{print $1}')
 $Question --text="Format (Erase all data) on the target home partition, $TargetHomePart?"
  if [ "$?" = "0" ]; then
   FormatHome="True"
  else
   FormatHome="False"
  fi
fi

if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
UserSetup
exit 0
fi


}



SelectSwapPart () {

SwapPartMenu=""
Swap=""

## Find swap partitions and find out which to use.
TargetSwap=$(fdisk -l | grep "swap" | cut -d " " -f1)
TargetSwap=$(echo "$TargetSwap" | sed -r "s/\/dev\///g")

for i in $TargetSwap; do
 SwapPart="$i"
 SwapPartSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
 SwapPartMenu="$SwapPartMenu $SwapPart $SwapPartSize"
done


Swap=$($Menu --width=300 --height=250 --text="  Please select the partition to use for swap\n" --column=Partition --column="Size in Megabytes" --button=$"Exit:3" --button=$"Use Swap File:5" --button=$"Use Selected:2" $SwapPartMenu)

ret=$?



if [ "$ret" = "3" ]; then
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectSwapPart
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 SelectSwapPart
 exit 0 
elif [ "$ret" = "5" ]; then
 SwapFile
 exit 0
elif [ "$Swap" = "" ]; then
 SelectSwapPart
 exit 0
elif [ -f /tmp/Finished-Menu ]; then
 Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
 FinishedMenu
 exit 0
else
 HomePartTest="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v 'p1' | grep -v "Extended" | grep -v "$TargetPart" | grep -v "Swap")"
 if [ "$HomePartTest" != "" ]; then
  Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
  SelectHomePart
  exit 0
 fi
 Swap=$(echo "$Swap" | awk -F '|' '{print $1}')
 UserSetup
 exit 0
fi
 
}

SwapFile () {

SwapFileSize=""

if [ "$AutoPart" = "Auto" ]; then
SwapFileSize=$($Menu --column="Size" --column=" " --text="  Please select the size of the SalineOS swap file to be created.\n" --button=$"Continue:2" 32 Megabytes 64 Megabytes 128 Megabytes 256 Megabytes 512 Megabytes 1024 Megabytes 2048 "Megabytes It is recommended to choose this setting" 3072 Megabytes 4096 Megabytes 5120 Megabytes 6144 Megabytes 8192 Megabytes 16384 Megabytes 30000 Megabytes --height=350 ) 
else
SwapFileSize=$($Menu --column="Size" --column=" " --text="  Please select the size of the SalineOS swap file to be created.\n" --button=$"Use Swap Partition (Advanced):3" --button=$"Continue using swap file:2" 32 Megabytes 64 Megabytes 128 Megabytes 256 Megabytes 512 Megabytes 1024 Megabytes 2048 "Megabytes It is recommended to choose this setting" 3072 Megabytes 4096 Megabytes 5120 Megabytes 6144 Megabytes 8192 Megabytes 16384 Megabytes 30000 Megabytes --height=350 ) 
fi

ret=$?

if [ "$ret" = "3" ]; then
 UseSwapFile="False"
 SelectSwapPart
 exit 0
elif [ "$ret" = "252" ]; then
 SwapFile
 exit 0 
elif [ "$SwapFileSize" = "" ]; then
 SwapFile
 exit 0
else
 UseSwapFile="True"
 SwapFileSize=$(echo "$SwapFileSize" | awk -F '|' '{print $1}') 
  if [ -f /tmp/Finished-Menu ]; then
   FinishedMenu
   exit 0
  elif [ "$AutoPart" = "Auto" ]; then
   UserSetup
   exit 0
  fi
 HomePartTest="$(fdisk -l | grep '/dev/' | grep -v "Disk" | grep -v 'p1' | grep -v "Extended" | grep -v "$TargetPart" | grep -v "Swap")"
 if [ "$HomePartTest" != "" ]; then
  SelectHomePart
  exit 0
 fi
 UserSetup
 exit 0
fi

}




## Choose the partition to install to

SelectRootPart () { 

PartMenu=""

Partitions=$(cat /proc/partitions | grep "$PartDrive" | awk '{print $4}' | grep "[0-9]" | grep -v 'p1')
InstallPart="$(echo $Partitions)"
for i in $Partitions; do
TempSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
if [ "$TempSize" = "1" ]; then
 InstallPart=$(echo $InstallPart | sed -r "s/$i//")
fi
done


for i in $InstallPart; do
  Part="$i"
  PartSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
  PartMenu="$PartMenu $Part $PartSize"
done


TargetPart=$($Menu --height=300 --width=300 --wrap --column="Partition Name" --column="Size In Megabytes" --button=$"Exit:3" --button=$"Use Selected:2" --text="Please select a partition to install the SalineOS root (Main) directory to.\n" $PartMenu )

ret=$?



if [ "$ret" = "252" ]; then
 SelectRootPart
 exit 0
elif [ "$ret" = "3" ]; then
   $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   SelectRootPart
   exit 0
  fi
elif [ "$TargetPart" = "" ]; then
 SelectRootPart
 exit 0
fi

TargetPart=$(echo "$TargetPart" | awk -F '|' '{print $1}')


if [ -f /tmp/Finished-Menu ]; then
 FinishedMenu
 exit 0
else
 SwapFile
 exit 0
fi


}


## Choose the drive to partition

ChooseDrive () { 

GrubMenu=""
PartDriveMenu=""
PartDrive=""

Drives=$(cat /proc/partitions | grep -v loop | grep -v major | grep -v "^$" | awk '{print $4}' | grep -v "[0-9]")

for i in $Drives; do
  PartDrive="$i"
  PartDriveSize=$(grep -m 1 "$i" /proc/partitions | awk '{print $3}')
  PartDriveMenu="$PartDriveMenu $PartDrive $PartDriveSize"
  GrubMenu="$PartDrive Master-Boot-Record $GrubMenu"
done

if [ "$AutoPart" = "Auto" ]; then
PartDrive=$($Menu --width=300 --height=300 --column="Drive" --column="Size In Megabytes" --text="Please select a drive to erase and use.\n"  --button=$"Exit:3" --button=$"OK:2" $PartDriveMenu )
else
PartDrive=$($Menu --width=300 --height=300 --column="Drive" --column="Size In Megabytes" --text="Please select a drive to partition.\n"  --button=$"Exit:3" --button=$"OK:2" $PartDriveMenu )
fi

ret=$?



if [ "$ret" = "3" ]; then
  $Question --text="Are you sure you want to cancel the installation?"
  if [ "$?" = "0" ]; then
   if [ -f /tmp/Finished-Menu ]; then
    rm /tmp/Finished-Menu
   fi
   exit 1
  else
   ChooseDrive
   exit 0
  fi
elif [ "$ret" = "252" ]; then
 ChooseDrive
 exit 0
elif [ "$PartDrive" = "" ]; then
 ChooseDrive
 exit 0
fi 

PartDrive=$(echo "$PartDrive" | awk -F '|' '{print $1}')

## Launch GParted
if [ "$AutoPart" != "Auto" ]; then
 gparted /dev/$PartDrive
fi

if [ "$AutoPart" = "Auto" ]; then
 SwapFile
 exit 0
else
 SelectRootPart
 exit 0
fi

}





## Ask the user if they wish to use automatic partitioning.

AutoPartitioning () {
$Info --width=500 --text="You will need at least one partition in order to install SalineOS.\n\nThe installer can erase all data on a hard drive, USB flash drive, or solid state disk of your choice and create this partition for you automatically, or you can manually partition your storage media using GParted.\n\nManual partitioning will allow you to preserve other operating systems and information on your hard disk." --button=$"Partition disk manually:3" --button=$"Erase and use an entire disk:5"

ret=$?

if [ "$ret" = "252" ]; then
 AutoPartitioning 
 exit 0
elif [ "$ret" = "5" ]; then
 AutoPart="Auto"
 ChooseDrive
 exit 0
elif [ "$ret" = "3" ]; then
 AutoPart="Manual"
 ChooseDrive
 exit 0
fi 

}


RestrictedMultimedia () {

InstallCodec=""

yad --wrap --height=300 --width=500 --center --image=gtk-dialog-question --button=$"Read Adobe EULA:3" --button=$"Decline:5" --button=$"Agree and Install:7" --title=SalineOS-Installer --window-icon=/usr/share/icons/SalineTango/salineos-installer.png --text="Support for a variety of media formats are possibly under patent protection in some jurisdictions. Therefore, support for decoding some media files is not included on this disk.  Plug-ins are available from a third party to decode a wide range of media formats, but use of these plug-ins without a license could possibly violate government sanctioned intellectual property rights. In order to install these plug-ins you must agree to:\n\nA. Accept responsibility for knowing the laws in your country.\n\nB. Never use the software to illegally copy a DVD disk.\n\nC. Accept the terms of Adobe's End User License Agreement.\n\n"

ret="$?"

if [ "$ret" = "252" ]; then
 RestrictedMultimedia
 exit 0
elif [ "$ret" = "5" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  InstallCodec="FALSE"
  FinishedMenu
  exit 0
 else
  InstallCodec="FALSE"
  AutoPartitioning
  exit 0
 fi
elif [ "$ret" = "3" ]; then
 yad --list --column='   ' --on-top --title="Adobe EULA" --window-icon=/usr/share/icons/SalineTango/salineos-installer.png --height="550" --width=700 --wrap --button=$"gtk-ok:5" "$(cat /etc/salineos-utils/adobeEULA)"
 RestrictedMultimedia
 exit 0
elif [ "$ret" = "7" ]; then
 if [ -f /tmp/Finished-Menu ]; then
  InstallCodec="TRUE"
  FinishedMenu
  exit 0
 else
  InstallCodec="TRUE"
  AutoPartitioning
  exit 0
 fi
fi 

}

## Tell the user that there are instructions in the user manual 
Instruction (){ 

$Info --text="Complete installation instructions are included\nin the user manual if needed." '--button=gtk-ok:1'

if [ "$Internet" != "Continue" ]; then
 RestrictedMultimedia
 exit 0
else
 AutoPartitioning
 exit 0
fi

}




## Check for internet connectivity and inform the user that some features require connectivity

InternetTest2 () {

$Info  --button=$"Retry connection:5" --button=$"Continue without an internet connection:3" --text="No internet connection detected, some features of this installer will be disabled.\n\nYou can configure your network settings by right clicking the on the network adapter\nicon in the upper right hand corner, on the top panel.\n\n"

ret=$?

if [ "$ret" = "3" ]; then
 Internet=Continue
 Instruction
 exit 0
elif [ "$ret" = "252" ]; then
 InternetTest2 
else
 InternetTest
 exit 0
fi

}



InternetTest () {



tail -f /usr/bin/salineos-installer | $Progress --pulsate --text="Checking for an active internet connection, please wait.\n" &

TestInternet="$(httping -g http://www.google.com -c 1 -t 15)"
Internet="$(echo "$TestInternet" | grep "0.00% failed")"


sleep 4
killall -KILL tail

if [ "$Internet" = "" ]; then 
 InternetTest2
 exit 0
else
 Instruction
 exit 0
fi


}

InternetTest

exit

